// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BBGameObject.proto

#ifndef PROTOBUF_BBGameObject_2eproto__INCLUDED
#define PROTOBUF_BBGameObject_2eproto__INCLUDED

#include <string>

#include "common.h"

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include "generated_message_util.h"
#include "repeated_field.h"
#include "extension_set.h"
#include "BBVector.serializer.h"
// @@protoc_insertion_point(includes)

namespace BBSerializer {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BBGameObject_2eproto();
void protobuf_AssignDesc_BBGameObject_2eproto();
void protobuf_ShutdownFile_BBGameObject_2eproto();

class BBGameObject;

// ===================================================================

class BBGameObject : public ::google::protobuf::MessageLite {
 public:
  BBGameObject();
  virtual ~BBGameObject();
  
  BBGameObject(const BBGameObject& from);
  
  inline BBGameObject& operator=(const BBGameObject& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BBGameObject& default_instance();
  
  void Swap(BBGameObject* other);
  
  // implements Message ----------------------------------------------
  
  BBGameObject* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BBGameObject& from);
  void MergeFrom(const BBGameObject& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string className = 3;
  inline bool has_classname() const;
  inline void clear_classname();
  static const int kClassNameFieldNumber = 3;
  inline const ::std::string& classname() const;
  inline void set_classname(const ::std::string& value);
  inline void set_classname(const char* value);
  inline void set_classname(const char* value, size_t size);
  inline ::std::string* mutable_classname();
  inline ::std::string* release_classname();
  
  // optional string iconName = 4;
  inline bool has_iconname() const;
  inline void clear_iconname();
  static const int kIconNameFieldNumber = 4;
  inline const ::std::string& iconname() const;
  inline void set_iconname(const ::std::string& value);
  inline void set_iconname(const char* value);
  inline void set_iconname(const char* value, size_t size);
  inline ::std::string* mutable_iconname();
  inline ::std::string* release_iconname();
  
  // optional string filePath = 5;
  inline bool has_filepath() const;
  inline void clear_filepath();
  static const int kFilePathFieldNumber = 5;
  inline const ::std::string& filepath() const;
  inline void set_filepath(const ::std::string& value);
  inline void set_filepath(const char* value);
  inline void set_filepath(const char* value, size_t size);
  inline ::std::string* mutable_filepath();
  inline ::std::string* release_filepath();
  
  // optional .BBSerializer.BBVector3f position = 6;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 6;
  inline const ::BBSerializer::BBVector3f& position() const;
  inline ::BBSerializer::BBVector3f* mutable_position();
  inline ::BBSerializer::BBVector3f* release_position();
  
  // optional .BBSerializer.BBVector3f localPosition = 7;
  inline bool has_localposition() const;
  inline void clear_localposition();
  static const int kLocalPositionFieldNumber = 7;
  inline const ::BBSerializer::BBVector3f& localposition() const;
  inline ::BBSerializer::BBVector3f* mutable_localposition();
  inline ::BBSerializer::BBVector3f* release_localposition();
  
  // optional .BBSerializer.BBVector3f rotation = 8;
  inline bool has_rotation() const;
  inline void clear_rotation();
  static const int kRotationFieldNumber = 8;
  inline const ::BBSerializer::BBVector3f& rotation() const;
  inline ::BBSerializer::BBVector3f* mutable_rotation();
  inline ::BBSerializer::BBVector3f* release_rotation();
  
  // optional .BBSerializer.BBVector3f localRotation = 9;
  inline bool has_localrotation() const;
  inline void clear_localrotation();
  static const int kLocalRotationFieldNumber = 9;
  inline const ::BBSerializer::BBVector3f& localrotation() const;
  inline ::BBSerializer::BBVector3f* mutable_localrotation();
  inline ::BBSerializer::BBVector3f* release_localrotation();
  
  // optional .BBSerializer.BBVector4f quaternion = 10;
  inline bool has_quaternion() const;
  inline void clear_quaternion();
  static const int kQuaternionFieldNumber = 10;
  inline const ::BBSerializer::BBVector4f& quaternion() const;
  inline ::BBSerializer::BBVector4f* mutable_quaternion();
  inline ::BBSerializer::BBVector4f* release_quaternion();
  
  // optional .BBSerializer.BBVector4f localQuaternion = 11;
  inline bool has_localquaternion() const;
  inline void clear_localquaternion();
  static const int kLocalQuaternionFieldNumber = 11;
  inline const ::BBSerializer::BBVector4f& localquaternion() const;
  inline ::BBSerializer::BBVector4f* mutable_localquaternion();
  inline ::BBSerializer::BBVector4f* release_localquaternion();
  
  // optional .BBSerializer.BBVector3f scale = 12;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 12;
  inline const ::BBSerializer::BBVector3f& scale() const;
  inline ::BBSerializer::BBVector3f* mutable_scale();
  inline ::BBSerializer::BBVector3f* release_scale();
  
  // optional .BBSerializer.BBVector3f localScale = 13;
  inline bool has_localscale() const;
  inline void clear_localscale();
  static const int kLocalScaleFieldNumber = 13;
  inline const ::BBSerializer::BBVector3f& localscale() const;
  inline ::BBSerializer::BBVector3f* mutable_localscale();
  inline ::BBSerializer::BBVector3f* release_localscale();
  
  // @@protoc_insertion_point(class_scope:BBSerializer.BBGameObject)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_classname();
  inline void clear_has_classname();
  inline void set_has_iconname();
  inline void clear_has_iconname();
  inline void set_has_filepath();
  inline void clear_has_filepath();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_localposition();
  inline void clear_has_localposition();
  inline void set_has_rotation();
  inline void clear_has_rotation();
  inline void set_has_localrotation();
  inline void clear_has_localrotation();
  inline void set_has_quaternion();
  inline void clear_has_quaternion();
  inline void set_has_localquaternion();
  inline void clear_has_localquaternion();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_localscale();
  inline void clear_has_localscale();
  
  ::std::string* name_;
  ::std::string* classname_;
  ::std::string* iconname_;
  ::std::string* filepath_;
  ::BBSerializer::BBVector3f* position_;
  ::BBSerializer::BBVector3f* localposition_;
  ::BBSerializer::BBVector3f* rotation_;
  ::BBSerializer::BBVector3f* localrotation_;
  ::BBSerializer::BBVector4f* quaternion_;
  ::BBSerializer::BBVector4f* localquaternion_;
  ::BBSerializer::BBVector3f* scale_;
  ::BBSerializer::BBVector3f* localscale_;
  ::google::protobuf::int32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_BBGameObject_2eproto();
  friend void protobuf_AssignDesc_BBGameObject_2eproto();
  friend void protobuf_ShutdownFile_BBGameObject_2eproto();
  
  void InitAsDefaultInstance();
  static BBGameObject* default_instance_;
};
// ===================================================================


// ===================================================================

// BBGameObject

// optional int32 index = 1;
inline bool BBGameObject::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BBGameObject::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BBGameObject::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BBGameObject::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 BBGameObject::index() const {
  return index_;
}
inline void BBGameObject::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional string name = 2;
inline bool BBGameObject::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BBGameObject::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BBGameObject::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BBGameObject::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BBGameObject::name() const {
  return *name_;
}
inline void BBGameObject::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BBGameObject::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BBGameObject::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BBGameObject::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* BBGameObject::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string className = 3;
inline bool BBGameObject::has_classname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BBGameObject::set_has_classname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BBGameObject::clear_has_classname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BBGameObject::clear_classname() {
  if (classname_ != &::google::protobuf::internal::kEmptyString) {
    classname_->clear();
  }
  clear_has_classname();
}
inline const ::std::string& BBGameObject::classname() const {
  return *classname_;
}
inline void BBGameObject::set_classname(const ::std::string& value) {
  set_has_classname();
  if (classname_ == &::google::protobuf::internal::kEmptyString) {
    classname_ = new ::std::string;
  }
  classname_->assign(value);
}
inline void BBGameObject::set_classname(const char* value) {
  set_has_classname();
  if (classname_ == &::google::protobuf::internal::kEmptyString) {
    classname_ = new ::std::string;
  }
  classname_->assign(value);
}
inline void BBGameObject::set_classname(const char* value, size_t size) {
  set_has_classname();
  if (classname_ == &::google::protobuf::internal::kEmptyString) {
    classname_ = new ::std::string;
  }
  classname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BBGameObject::mutable_classname() {
  set_has_classname();
  if (classname_ == &::google::protobuf::internal::kEmptyString) {
    classname_ = new ::std::string;
  }
  return classname_;
}
inline ::std::string* BBGameObject::release_classname() {
  clear_has_classname();
  if (classname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = classname_;
    classname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string iconName = 4;
inline bool BBGameObject::has_iconname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BBGameObject::set_has_iconname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BBGameObject::clear_has_iconname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BBGameObject::clear_iconname() {
  if (iconname_ != &::google::protobuf::internal::kEmptyString) {
    iconname_->clear();
  }
  clear_has_iconname();
}
inline const ::std::string& BBGameObject::iconname() const {
  return *iconname_;
}
inline void BBGameObject::set_iconname(const ::std::string& value) {
  set_has_iconname();
  if (iconname_ == &::google::protobuf::internal::kEmptyString) {
    iconname_ = new ::std::string;
  }
  iconname_->assign(value);
}
inline void BBGameObject::set_iconname(const char* value) {
  set_has_iconname();
  if (iconname_ == &::google::protobuf::internal::kEmptyString) {
    iconname_ = new ::std::string;
  }
  iconname_->assign(value);
}
inline void BBGameObject::set_iconname(const char* value, size_t size) {
  set_has_iconname();
  if (iconname_ == &::google::protobuf::internal::kEmptyString) {
    iconname_ = new ::std::string;
  }
  iconname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BBGameObject::mutable_iconname() {
  set_has_iconname();
  if (iconname_ == &::google::protobuf::internal::kEmptyString) {
    iconname_ = new ::std::string;
  }
  return iconname_;
}
inline ::std::string* BBGameObject::release_iconname() {
  clear_has_iconname();
  if (iconname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = iconname_;
    iconname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string filePath = 5;
inline bool BBGameObject::has_filepath() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BBGameObject::set_has_filepath() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BBGameObject::clear_has_filepath() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BBGameObject::clear_filepath() {
  if (filepath_ != &::google::protobuf::internal::kEmptyString) {
    filepath_->clear();
  }
  clear_has_filepath();
}
inline const ::std::string& BBGameObject::filepath() const {
  return *filepath_;
}
inline void BBGameObject::set_filepath(const ::std::string& value) {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::kEmptyString) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(value);
}
inline void BBGameObject::set_filepath(const char* value) {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::kEmptyString) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(value);
}
inline void BBGameObject::set_filepath(const char* value, size_t size) {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::kEmptyString) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BBGameObject::mutable_filepath() {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::kEmptyString) {
    filepath_ = new ::std::string;
  }
  return filepath_;
}
inline ::std::string* BBGameObject::release_filepath() {
  clear_has_filepath();
  if (filepath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filepath_;
    filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .BBSerializer.BBVector3f position = 6;
inline bool BBGameObject::has_position() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BBGameObject::set_has_position() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BBGameObject::clear_has_position() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BBGameObject::clear_position() {
  if (position_ != NULL) position_->::BBSerializer::BBVector3f::Clear();
  clear_has_position();
}
inline const ::BBSerializer::BBVector3f& BBGameObject::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::BBSerializer::BBVector3f* BBGameObject::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::BBSerializer::BBVector3f;
  return position_;
}
inline ::BBSerializer::BBVector3f* BBGameObject::release_position() {
  clear_has_position();
  ::BBSerializer::BBVector3f* temp = position_;
  position_ = NULL;
  return temp;
}

// optional .BBSerializer.BBVector3f localPosition = 7;
inline bool BBGameObject::has_localposition() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BBGameObject::set_has_localposition() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BBGameObject::clear_has_localposition() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BBGameObject::clear_localposition() {
  if (localposition_ != NULL) localposition_->::BBSerializer::BBVector3f::Clear();
  clear_has_localposition();
}
inline const ::BBSerializer::BBVector3f& BBGameObject::localposition() const {
  return localposition_ != NULL ? *localposition_ : *default_instance_->localposition_;
}
inline ::BBSerializer::BBVector3f* BBGameObject::mutable_localposition() {
  set_has_localposition();
  if (localposition_ == NULL) localposition_ = new ::BBSerializer::BBVector3f;
  return localposition_;
}
inline ::BBSerializer::BBVector3f* BBGameObject::release_localposition() {
  clear_has_localposition();
  ::BBSerializer::BBVector3f* temp = localposition_;
  localposition_ = NULL;
  return temp;
}

// optional .BBSerializer.BBVector3f rotation = 8;
inline bool BBGameObject::has_rotation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BBGameObject::set_has_rotation() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BBGameObject::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BBGameObject::clear_rotation() {
  if (rotation_ != NULL) rotation_->::BBSerializer::BBVector3f::Clear();
  clear_has_rotation();
}
inline const ::BBSerializer::BBVector3f& BBGameObject::rotation() const {
  return rotation_ != NULL ? *rotation_ : *default_instance_->rotation_;
}
inline ::BBSerializer::BBVector3f* BBGameObject::mutable_rotation() {
  set_has_rotation();
  if (rotation_ == NULL) rotation_ = new ::BBSerializer::BBVector3f;
  return rotation_;
}
inline ::BBSerializer::BBVector3f* BBGameObject::release_rotation() {
  clear_has_rotation();
  ::BBSerializer::BBVector3f* temp = rotation_;
  rotation_ = NULL;
  return temp;
}

// optional .BBSerializer.BBVector3f localRotation = 9;
inline bool BBGameObject::has_localrotation() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BBGameObject::set_has_localrotation() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BBGameObject::clear_has_localrotation() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BBGameObject::clear_localrotation() {
  if (localrotation_ != NULL) localrotation_->::BBSerializer::BBVector3f::Clear();
  clear_has_localrotation();
}
inline const ::BBSerializer::BBVector3f& BBGameObject::localrotation() const {
  return localrotation_ != NULL ? *localrotation_ : *default_instance_->localrotation_;
}
inline ::BBSerializer::BBVector3f* BBGameObject::mutable_localrotation() {
  set_has_localrotation();
  if (localrotation_ == NULL) localrotation_ = new ::BBSerializer::BBVector3f;
  return localrotation_;
}
inline ::BBSerializer::BBVector3f* BBGameObject::release_localrotation() {
  clear_has_localrotation();
  ::BBSerializer::BBVector3f* temp = localrotation_;
  localrotation_ = NULL;
  return temp;
}

// optional .BBSerializer.BBVector4f quaternion = 10;
inline bool BBGameObject::has_quaternion() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BBGameObject::set_has_quaternion() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BBGameObject::clear_has_quaternion() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BBGameObject::clear_quaternion() {
  if (quaternion_ != NULL) quaternion_->::BBSerializer::BBVector4f::Clear();
  clear_has_quaternion();
}
inline const ::BBSerializer::BBVector4f& BBGameObject::quaternion() const {
  return quaternion_ != NULL ? *quaternion_ : *default_instance_->quaternion_;
}
inline ::BBSerializer::BBVector4f* BBGameObject::mutable_quaternion() {
  set_has_quaternion();
  if (quaternion_ == NULL) quaternion_ = new ::BBSerializer::BBVector4f;
  return quaternion_;
}
inline ::BBSerializer::BBVector4f* BBGameObject::release_quaternion() {
  clear_has_quaternion();
  ::BBSerializer::BBVector4f* temp = quaternion_;
  quaternion_ = NULL;
  return temp;
}

// optional .BBSerializer.BBVector4f localQuaternion = 11;
inline bool BBGameObject::has_localquaternion() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BBGameObject::set_has_localquaternion() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BBGameObject::clear_has_localquaternion() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BBGameObject::clear_localquaternion() {
  if (localquaternion_ != NULL) localquaternion_->::BBSerializer::BBVector4f::Clear();
  clear_has_localquaternion();
}
inline const ::BBSerializer::BBVector4f& BBGameObject::localquaternion() const {
  return localquaternion_ != NULL ? *localquaternion_ : *default_instance_->localquaternion_;
}
inline ::BBSerializer::BBVector4f* BBGameObject::mutable_localquaternion() {
  set_has_localquaternion();
  if (localquaternion_ == NULL) localquaternion_ = new ::BBSerializer::BBVector4f;
  return localquaternion_;
}
inline ::BBSerializer::BBVector4f* BBGameObject::release_localquaternion() {
  clear_has_localquaternion();
  ::BBSerializer::BBVector4f* temp = localquaternion_;
  localquaternion_ = NULL;
  return temp;
}

// optional .BBSerializer.BBVector3f scale = 12;
inline bool BBGameObject::has_scale() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BBGameObject::set_has_scale() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BBGameObject::clear_has_scale() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BBGameObject::clear_scale() {
  if (scale_ != NULL) scale_->::BBSerializer::BBVector3f::Clear();
  clear_has_scale();
}
inline const ::BBSerializer::BBVector3f& BBGameObject::scale() const {
  return scale_ != NULL ? *scale_ : *default_instance_->scale_;
}
inline ::BBSerializer::BBVector3f* BBGameObject::mutable_scale() {
  set_has_scale();
  if (scale_ == NULL) scale_ = new ::BBSerializer::BBVector3f;
  return scale_;
}
inline ::BBSerializer::BBVector3f* BBGameObject::release_scale() {
  clear_has_scale();
  ::BBSerializer::BBVector3f* temp = scale_;
  scale_ = NULL;
  return temp;
}

// optional .BBSerializer.BBVector3f localScale = 13;
inline bool BBGameObject::has_localscale() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BBGameObject::set_has_localscale() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BBGameObject::clear_has_localscale() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BBGameObject::clear_localscale() {
  if (localscale_ != NULL) localscale_->::BBSerializer::BBVector3f::Clear();
  clear_has_localscale();
}
inline const ::BBSerializer::BBVector3f& BBGameObject::localscale() const {
  return localscale_ != NULL ? *localscale_ : *default_instance_->localscale_;
}
inline ::BBSerializer::BBVector3f* BBGameObject::mutable_localscale() {
  set_has_localscale();
  if (localscale_ == NULL) localscale_ = new ::BBSerializer::BBVector3f;
  return localscale_;
}
inline ::BBSerializer::BBVector3f* BBGameObject::release_localscale() {
  clear_has_localscale();
  ::BBSerializer::BBVector3f* temp = localscale_;
  localscale_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace BBSerializer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BBGameObject_2eproto__INCLUDED
