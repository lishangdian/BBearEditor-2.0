// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BBMaterial.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_BBMaterial_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_BBMaterial_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3016000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3016000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "BBVector.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_BBMaterial_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_BBMaterial_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_BBMaterial_2eproto;
namespace BBSerializer {
class BBMaterial;
struct BBMaterialDefaultTypeInternal;
extern BBMaterialDefaultTypeInternal _BBMaterial_default_instance_;
}  // namespace BBSerializer
PROTOBUF_NAMESPACE_OPEN
template<> ::BBSerializer::BBMaterial* Arena::CreateMaybeMessage<::BBSerializer::BBMaterial>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace BBSerializer {

// ===================================================================

class BBMaterial PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BBSerializer.BBMaterial) */ {
 public:
  inline BBMaterial() : BBMaterial(nullptr) {}
  ~BBMaterial() override;
  explicit constexpr BBMaterial(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BBMaterial(const BBMaterial& from);
  BBMaterial(BBMaterial&& from) noexcept
    : BBMaterial() {
    *this = ::std::move(from);
  }

  inline BBMaterial& operator=(const BBMaterial& from) {
    CopyFrom(from);
    return *this;
  }
  inline BBMaterial& operator=(BBMaterial&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BBMaterial& default_instance() {
    return *internal_default_instance();
  }
  static inline const BBMaterial* internal_default_instance() {
    return reinterpret_cast<const BBMaterial*>(
               &_BBMaterial_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BBMaterial& a, BBMaterial& b) {
    a.Swap(&b);
  }
  inline void Swap(BBMaterial* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BBMaterial* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BBMaterial* New() const final {
    return CreateMaybeMessage<BBMaterial>(nullptr);
  }

  BBMaterial* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BBMaterial>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BBMaterial& from);
  void MergeFrom(const BBMaterial& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BBMaterial* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BBSerializer.BBMaterial";
  }
  protected:
  explicit BBMaterial(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShaderNameFieldNumber = 1,
    kVShaderPathFieldNumber = 2,
    kFShaderPathFieldNumber = 3,
  };
  // string shaderName = 1;
  bool has_shadername() const;
  private:
  bool _internal_has_shadername() const;
  public:
  void clear_shadername();
  const std::string& shadername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shadername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shadername();
  std::string* release_shadername();
  void set_allocated_shadername(std::string* shadername);
  private:
  const std::string& _internal_shadername() const;
  void _internal_set_shadername(const std::string& value);
  std::string* _internal_mutable_shadername();
  public:

  // string vShaderPath = 2;
  bool has_vshaderpath() const;
  private:
  bool _internal_has_vshaderpath() const;
  public:
  void clear_vshaderpath();
  const std::string& vshaderpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vshaderpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vshaderpath();
  std::string* release_vshaderpath();
  void set_allocated_vshaderpath(std::string* vshaderpath);
  private:
  const std::string& _internal_vshaderpath() const;
  void _internal_set_vshaderpath(const std::string& value);
  std::string* _internal_mutable_vshaderpath();
  public:

  // string fShaderPath = 3;
  bool has_fshaderpath() const;
  private:
  bool _internal_has_fshaderpath() const;
  public:
  void clear_fshaderpath();
  const std::string& fshaderpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fshaderpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fshaderpath();
  std::string* release_fshaderpath();
  void set_allocated_fshaderpath(std::string* fshaderpath);
  private:
  const std::string& _internal_fshaderpath() const;
  void _internal_set_fshaderpath(const std::string& value);
  std::string* _internal_mutable_fshaderpath();
  public:

  // @@protoc_insertion_point(class_scope:BBSerializer.BBMaterial)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shadername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vshaderpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fshaderpath_;
  friend struct ::TableStruct_BBMaterial_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BBMaterial

// string shaderName = 1;
inline bool BBMaterial::_internal_has_shadername() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BBMaterial::has_shadername() const {
  return _internal_has_shadername();
}
inline void BBMaterial::clear_shadername() {
  shadername_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BBMaterial::shadername() const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBMaterial.shaderName)
  return _internal_shadername();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void BBMaterial::set_shadername(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 shadername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:BBSerializer.BBMaterial.shaderName)
}
inline std::string* BBMaterial::mutable_shadername() {
  // @@protoc_insertion_point(field_mutable:BBSerializer.BBMaterial.shaderName)
  return _internal_mutable_shadername();
}
inline const std::string& BBMaterial::_internal_shadername() const {
  return shadername_.Get();
}
inline void BBMaterial::_internal_set_shadername(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  shadername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* BBMaterial::_internal_mutable_shadername() {
  _has_bits_[0] |= 0x00000001u;
  return shadername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BBMaterial::release_shadername() {
  // @@protoc_insertion_point(field_release:BBSerializer.BBMaterial.shaderName)
  if (!_internal_has_shadername()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return shadername_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BBMaterial::set_allocated_shadername(std::string* shadername) {
  if (shadername != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  shadername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shadername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BBSerializer.BBMaterial.shaderName)
}

// string vShaderPath = 2;
inline bool BBMaterial::_internal_has_vshaderpath() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BBMaterial::has_vshaderpath() const {
  return _internal_has_vshaderpath();
}
inline void BBMaterial::clear_vshaderpath() {
  vshaderpath_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BBMaterial::vshaderpath() const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBMaterial.vShaderPath)
  return _internal_vshaderpath();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void BBMaterial::set_vshaderpath(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 vshaderpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:BBSerializer.BBMaterial.vShaderPath)
}
inline std::string* BBMaterial::mutable_vshaderpath() {
  // @@protoc_insertion_point(field_mutable:BBSerializer.BBMaterial.vShaderPath)
  return _internal_mutable_vshaderpath();
}
inline const std::string& BBMaterial::_internal_vshaderpath() const {
  return vshaderpath_.Get();
}
inline void BBMaterial::_internal_set_vshaderpath(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  vshaderpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* BBMaterial::_internal_mutable_vshaderpath() {
  _has_bits_[0] |= 0x00000002u;
  return vshaderpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BBMaterial::release_vshaderpath() {
  // @@protoc_insertion_point(field_release:BBSerializer.BBMaterial.vShaderPath)
  if (!_internal_has_vshaderpath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return vshaderpath_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BBMaterial::set_allocated_vshaderpath(std::string* vshaderpath) {
  if (vshaderpath != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  vshaderpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vshaderpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BBSerializer.BBMaterial.vShaderPath)
}

// string fShaderPath = 3;
inline bool BBMaterial::_internal_has_fshaderpath() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BBMaterial::has_fshaderpath() const {
  return _internal_has_fshaderpath();
}
inline void BBMaterial::clear_fshaderpath() {
  fshaderpath_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BBMaterial::fshaderpath() const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBMaterial.fShaderPath)
  return _internal_fshaderpath();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void BBMaterial::set_fshaderpath(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 fshaderpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:BBSerializer.BBMaterial.fShaderPath)
}
inline std::string* BBMaterial::mutable_fshaderpath() {
  // @@protoc_insertion_point(field_mutable:BBSerializer.BBMaterial.fShaderPath)
  return _internal_mutable_fshaderpath();
}
inline const std::string& BBMaterial::_internal_fshaderpath() const {
  return fshaderpath_.Get();
}
inline void BBMaterial::_internal_set_fshaderpath(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  fshaderpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* BBMaterial::_internal_mutable_fshaderpath() {
  _has_bits_[0] |= 0x00000004u;
  return fshaderpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BBMaterial::release_fshaderpath() {
  // @@protoc_insertion_point(field_release:BBSerializer.BBMaterial.fShaderPath)
  if (!_internal_has_fshaderpath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return fshaderpath_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BBMaterial::set_allocated_fshaderpath(std::string* fshaderpath) {
  if (fshaderpath != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  fshaderpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fshaderpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BBSerializer.BBMaterial.fShaderPath)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace BBSerializer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_BBMaterial_2eproto
