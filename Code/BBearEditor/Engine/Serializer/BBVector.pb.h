// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BBVector.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_BBVector_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_BBVector_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3016000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3016000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_BBVector_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_BBVector_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_BBVector_2eproto;
namespace BBSerializer {
class BBMatrix4f;
struct BBMatrix4fDefaultTypeInternal;
extern BBMatrix4fDefaultTypeInternal _BBMatrix4f_default_instance_;
class BBMatrix4fB;
struct BBMatrix4fBDefaultTypeInternal;
extern BBMatrix4fBDefaultTypeInternal _BBMatrix4fB_default_instance_;
class BBVector2f;
struct BBVector2fDefaultTypeInternal;
extern BBVector2fDefaultTypeInternal _BBVector2f_default_instance_;
class BBVector2i;
struct BBVector2iDefaultTypeInternal;
extern BBVector2iDefaultTypeInternal _BBVector2i_default_instance_;
class BBVector3f;
struct BBVector3fDefaultTypeInternal;
extern BBVector3fDefaultTypeInternal _BBVector3f_default_instance_;
class BBVector3i;
struct BBVector3iDefaultTypeInternal;
extern BBVector3iDefaultTypeInternal _BBVector3i_default_instance_;
class BBVector4f;
struct BBVector4fDefaultTypeInternal;
extern BBVector4fDefaultTypeInternal _BBVector4f_default_instance_;
class BBVector4i;
struct BBVector4iDefaultTypeInternal;
extern BBVector4iDefaultTypeInternal _BBVector4i_default_instance_;
}  // namespace BBSerializer
PROTOBUF_NAMESPACE_OPEN
template<> ::BBSerializer::BBMatrix4f* Arena::CreateMaybeMessage<::BBSerializer::BBMatrix4f>(Arena*);
template<> ::BBSerializer::BBMatrix4fB* Arena::CreateMaybeMessage<::BBSerializer::BBMatrix4fB>(Arena*);
template<> ::BBSerializer::BBVector2f* Arena::CreateMaybeMessage<::BBSerializer::BBVector2f>(Arena*);
template<> ::BBSerializer::BBVector2i* Arena::CreateMaybeMessage<::BBSerializer::BBVector2i>(Arena*);
template<> ::BBSerializer::BBVector3f* Arena::CreateMaybeMessage<::BBSerializer::BBVector3f>(Arena*);
template<> ::BBSerializer::BBVector3i* Arena::CreateMaybeMessage<::BBSerializer::BBVector3i>(Arena*);
template<> ::BBSerializer::BBVector4f* Arena::CreateMaybeMessage<::BBSerializer::BBVector4f>(Arena*);
template<> ::BBSerializer::BBVector4i* Arena::CreateMaybeMessage<::BBSerializer::BBVector4i>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace BBSerializer {

// ===================================================================

class BBVector2f PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BBSerializer.BBVector2f) */ {
 public:
  inline BBVector2f() : BBVector2f(nullptr) {}
  ~BBVector2f() override;
  explicit constexpr BBVector2f(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BBVector2f(const BBVector2f& from);
  BBVector2f(BBVector2f&& from) noexcept
    : BBVector2f() {
    *this = ::std::move(from);
  }

  inline BBVector2f& operator=(const BBVector2f& from) {
    CopyFrom(from);
    return *this;
  }
  inline BBVector2f& operator=(BBVector2f&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BBVector2f& default_instance() {
    return *internal_default_instance();
  }
  static inline const BBVector2f* internal_default_instance() {
    return reinterpret_cast<const BBVector2f*>(
               &_BBVector2f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BBVector2f& a, BBVector2f& b) {
    a.Swap(&b);
  }
  inline void Swap(BBVector2f* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BBVector2f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BBVector2f* New() const final {
    return CreateMaybeMessage<BBVector2f>(nullptr);
  }

  BBVector2f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BBVector2f>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BBVector2f& from);
  void MergeFrom(const BBVector2f& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BBVector2f* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BBSerializer.BBVector2f";
  }
  protected:
  explicit BBVector2f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:BBSerializer.BBVector2f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  friend struct ::TableStruct_BBVector_2eproto;
};
// -------------------------------------------------------------------

class BBVector2i PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BBSerializer.BBVector2i) */ {
 public:
  inline BBVector2i() : BBVector2i(nullptr) {}
  ~BBVector2i() override;
  explicit constexpr BBVector2i(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BBVector2i(const BBVector2i& from);
  BBVector2i(BBVector2i&& from) noexcept
    : BBVector2i() {
    *this = ::std::move(from);
  }

  inline BBVector2i& operator=(const BBVector2i& from) {
    CopyFrom(from);
    return *this;
  }
  inline BBVector2i& operator=(BBVector2i&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BBVector2i& default_instance() {
    return *internal_default_instance();
  }
  static inline const BBVector2i* internal_default_instance() {
    return reinterpret_cast<const BBVector2i*>(
               &_BBVector2i_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BBVector2i& a, BBVector2i& b) {
    a.Swap(&b);
  }
  inline void Swap(BBVector2i* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BBVector2i* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BBVector2i* New() const final {
    return CreateMaybeMessage<BBVector2i>(nullptr);
  }

  BBVector2i* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BBVector2i>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BBVector2i& from);
  void MergeFrom(const BBVector2i& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BBVector2i* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BBSerializer.BBVector2i";
  }
  protected:
  explicit BBVector2i(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int32 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BBSerializer.BBVector2i)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  friend struct ::TableStruct_BBVector_2eproto;
};
// -------------------------------------------------------------------

class BBVector3f PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BBSerializer.BBVector3f) */ {
 public:
  inline BBVector3f() : BBVector3f(nullptr) {}
  ~BBVector3f() override;
  explicit constexpr BBVector3f(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BBVector3f(const BBVector3f& from);
  BBVector3f(BBVector3f&& from) noexcept
    : BBVector3f() {
    *this = ::std::move(from);
  }

  inline BBVector3f& operator=(const BBVector3f& from) {
    CopyFrom(from);
    return *this;
  }
  inline BBVector3f& operator=(BBVector3f&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BBVector3f& default_instance() {
    return *internal_default_instance();
  }
  static inline const BBVector3f* internal_default_instance() {
    return reinterpret_cast<const BBVector3f*>(
               &_BBVector3f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BBVector3f& a, BBVector3f& b) {
    a.Swap(&b);
  }
  inline void Swap(BBVector3f* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BBVector3f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BBVector3f* New() const final {
    return CreateMaybeMessage<BBVector3f>(nullptr);
  }

  BBVector3f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BBVector3f>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BBVector3f& from);
  void MergeFrom(const BBVector3f& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BBVector3f* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BBSerializer.BBVector3f";
  }
  protected:
  explicit BBVector3f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:BBSerializer.BBVector3f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float z_;
  friend struct ::TableStruct_BBVector_2eproto;
};
// -------------------------------------------------------------------

class BBVector3i PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BBSerializer.BBVector3i) */ {
 public:
  inline BBVector3i() : BBVector3i(nullptr) {}
  ~BBVector3i() override;
  explicit constexpr BBVector3i(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BBVector3i(const BBVector3i& from);
  BBVector3i(BBVector3i&& from) noexcept
    : BBVector3i() {
    *this = ::std::move(from);
  }

  inline BBVector3i& operator=(const BBVector3i& from) {
    CopyFrom(from);
    return *this;
  }
  inline BBVector3i& operator=(BBVector3i&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BBVector3i& default_instance() {
    return *internal_default_instance();
  }
  static inline const BBVector3i* internal_default_instance() {
    return reinterpret_cast<const BBVector3i*>(
               &_BBVector3i_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BBVector3i& a, BBVector3i& b) {
    a.Swap(&b);
  }
  inline void Swap(BBVector3i* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BBVector3i* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BBVector3i* New() const final {
    return CreateMaybeMessage<BBVector3i>(nullptr);
  }

  BBVector3i* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BBVector3i>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BBVector3i& from);
  void MergeFrom(const BBVector3i& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BBVector3i* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BBSerializer.BBVector3i";
  }
  protected:
  explicit BBVector3i(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // int32 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  ::PROTOBUF_NAMESPACE_ID::int32 z() const;
  void set_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_z() const;
  void _internal_set_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BBSerializer.BBVector3i)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::int32 z_;
  friend struct ::TableStruct_BBVector_2eproto;
};
// -------------------------------------------------------------------

class BBVector4f PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BBSerializer.BBVector4f) */ {
 public:
  inline BBVector4f() : BBVector4f(nullptr) {}
  ~BBVector4f() override;
  explicit constexpr BBVector4f(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BBVector4f(const BBVector4f& from);
  BBVector4f(BBVector4f&& from) noexcept
    : BBVector4f() {
    *this = ::std::move(from);
  }

  inline BBVector4f& operator=(const BBVector4f& from) {
    CopyFrom(from);
    return *this;
  }
  inline BBVector4f& operator=(BBVector4f&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BBVector4f& default_instance() {
    return *internal_default_instance();
  }
  static inline const BBVector4f* internal_default_instance() {
    return reinterpret_cast<const BBVector4f*>(
               &_BBVector4f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BBVector4f& a, BBVector4f& b) {
    a.Swap(&b);
  }
  inline void Swap(BBVector4f* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BBVector4f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BBVector4f* New() const final {
    return CreateMaybeMessage<BBVector4f>(nullptr);
  }

  BBVector4f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BBVector4f>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BBVector4f& from);
  void MergeFrom(const BBVector4f& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BBVector4f* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BBSerializer.BBVector4f";
  }
  protected:
  explicit BBVector4f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float w = 4;
  bool has_w() const;
  private:
  bool _internal_has_w() const;
  public:
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // @@protoc_insertion_point(class_scope:BBSerializer.BBVector4f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float z_;
  float w_;
  friend struct ::TableStruct_BBVector_2eproto;
};
// -------------------------------------------------------------------

class BBVector4i PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BBSerializer.BBVector4i) */ {
 public:
  inline BBVector4i() : BBVector4i(nullptr) {}
  ~BBVector4i() override;
  explicit constexpr BBVector4i(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BBVector4i(const BBVector4i& from);
  BBVector4i(BBVector4i&& from) noexcept
    : BBVector4i() {
    *this = ::std::move(from);
  }

  inline BBVector4i& operator=(const BBVector4i& from) {
    CopyFrom(from);
    return *this;
  }
  inline BBVector4i& operator=(BBVector4i&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BBVector4i& default_instance() {
    return *internal_default_instance();
  }
  static inline const BBVector4i* internal_default_instance() {
    return reinterpret_cast<const BBVector4i*>(
               &_BBVector4i_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BBVector4i& a, BBVector4i& b) {
    a.Swap(&b);
  }
  inline void Swap(BBVector4i* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BBVector4i* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BBVector4i* New() const final {
    return CreateMaybeMessage<BBVector4i>(nullptr);
  }

  BBVector4i* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BBVector4i>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BBVector4i& from);
  void MergeFrom(const BBVector4i& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BBVector4i* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BBSerializer.BBVector4i";
  }
  protected:
  explicit BBVector4i(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // int32 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  ::PROTOBUF_NAMESPACE_ID::int32 z() const;
  void set_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_z() const;
  void _internal_set_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 w = 4;
  bool has_w() const;
  private:
  bool _internal_has_w() const;
  public:
  void clear_w();
  ::PROTOBUF_NAMESPACE_ID::int32 w() const;
  void set_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_w() const;
  void _internal_set_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BBSerializer.BBVector4i)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::int32 z_;
  ::PROTOBUF_NAMESPACE_ID::int32 w_;
  friend struct ::TableStruct_BBVector_2eproto;
};
// -------------------------------------------------------------------

class BBMatrix4f PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BBSerializer.BBMatrix4f) */ {
 public:
  inline BBMatrix4f() : BBMatrix4f(nullptr) {}
  ~BBMatrix4f() override;
  explicit constexpr BBMatrix4f(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BBMatrix4f(const BBMatrix4f& from);
  BBMatrix4f(BBMatrix4f&& from) noexcept
    : BBMatrix4f() {
    *this = ::std::move(from);
  }

  inline BBMatrix4f& operator=(const BBMatrix4f& from) {
    CopyFrom(from);
    return *this;
  }
  inline BBMatrix4f& operator=(BBMatrix4f&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BBMatrix4f& default_instance() {
    return *internal_default_instance();
  }
  static inline const BBMatrix4f* internal_default_instance() {
    return reinterpret_cast<const BBMatrix4f*>(
               &_BBMatrix4f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BBMatrix4f& a, BBMatrix4f& b) {
    a.Swap(&b);
  }
  inline void Swap(BBMatrix4f* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BBMatrix4f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BBMatrix4f* New() const final {
    return CreateMaybeMessage<BBMatrix4f>(nullptr);
  }

  BBMatrix4f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BBMatrix4f>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BBMatrix4f& from);
  void MergeFrom(const BBMatrix4f& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BBMatrix4f* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BBSerializer.BBMatrix4f";
  }
  protected:
  explicit BBMatrix4f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated float data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  float _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_data() const;
  void _internal_add_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_data();
  public:
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:BBSerializer.BBMatrix4f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BBVector_2eproto;
};
// -------------------------------------------------------------------

class BBMatrix4fB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BBSerializer.BBMatrix4fB) */ {
 public:
  inline BBMatrix4fB() : BBMatrix4fB(nullptr) {}
  ~BBMatrix4fB() override;
  explicit constexpr BBMatrix4fB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BBMatrix4fB(const BBMatrix4fB& from);
  BBMatrix4fB(BBMatrix4fB&& from) noexcept
    : BBMatrix4fB() {
    *this = ::std::move(from);
  }

  inline BBMatrix4fB& operator=(const BBMatrix4fB& from) {
    CopyFrom(from);
    return *this;
  }
  inline BBMatrix4fB& operator=(BBMatrix4fB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BBMatrix4fB& default_instance() {
    return *internal_default_instance();
  }
  static inline const BBMatrix4fB* internal_default_instance() {
    return reinterpret_cast<const BBMatrix4fB*>(
               &_BBMatrix4fB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BBMatrix4fB& a, BBMatrix4fB& b) {
    a.Swap(&b);
  }
  inline void Swap(BBMatrix4fB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BBMatrix4fB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BBMatrix4fB* New() const final {
    return CreateMaybeMessage<BBMatrix4fB>(nullptr);
  }

  BBMatrix4fB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BBMatrix4fB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BBMatrix4fB& from);
  void MergeFrom(const BBMatrix4fB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BBMatrix4fB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BBSerializer.BBMatrix4fB";
  }
  protected:
  explicit BBMatrix4fB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:BBSerializer.BBMatrix4fB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  friend struct ::TableStruct_BBVector_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BBVector2f

// float x = 1;
inline bool BBVector2f::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BBVector2f::has_x() const {
  return _internal_has_x();
}
inline void BBVector2f::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float BBVector2f::_internal_x() const {
  return x_;
}
inline float BBVector2f::x() const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBVector2f.x)
  return _internal_x();
}
inline void BBVector2f::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void BBVector2f::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:BBSerializer.BBVector2f.x)
}

// float y = 2;
inline bool BBVector2f::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BBVector2f::has_y() const {
  return _internal_has_y();
}
inline void BBVector2f::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float BBVector2f::_internal_y() const {
  return y_;
}
inline float BBVector2f::y() const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBVector2f.y)
  return _internal_y();
}
inline void BBVector2f::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void BBVector2f::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:BBSerializer.BBVector2f.y)
}

// -------------------------------------------------------------------

// BBVector2i

// int32 x = 1;
inline bool BBVector2i::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BBVector2i::has_x() const {
  return _internal_has_x();
}
inline void BBVector2i::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BBVector2i::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BBVector2i::x() const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBVector2i.x)
  return _internal_x();
}
inline void BBVector2i::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void BBVector2i::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:BBSerializer.BBVector2i.x)
}

// int32 y = 2;
inline bool BBVector2i::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BBVector2i::has_y() const {
  return _internal_has_y();
}
inline void BBVector2i::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BBVector2i::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BBVector2i::y() const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBVector2i.y)
  return _internal_y();
}
inline void BBVector2i::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void BBVector2i::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:BBSerializer.BBVector2i.y)
}

// -------------------------------------------------------------------

// BBVector3f

// float x = 1;
inline bool BBVector3f::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BBVector3f::has_x() const {
  return _internal_has_x();
}
inline void BBVector3f::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float BBVector3f::_internal_x() const {
  return x_;
}
inline float BBVector3f::x() const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBVector3f.x)
  return _internal_x();
}
inline void BBVector3f::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void BBVector3f::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:BBSerializer.BBVector3f.x)
}

// float y = 2;
inline bool BBVector3f::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BBVector3f::has_y() const {
  return _internal_has_y();
}
inline void BBVector3f::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float BBVector3f::_internal_y() const {
  return y_;
}
inline float BBVector3f::y() const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBVector3f.y)
  return _internal_y();
}
inline void BBVector3f::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void BBVector3f::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:BBSerializer.BBVector3f.y)
}

// float z = 3;
inline bool BBVector3f::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BBVector3f::has_z() const {
  return _internal_has_z();
}
inline void BBVector3f::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float BBVector3f::_internal_z() const {
  return z_;
}
inline float BBVector3f::z() const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBVector3f.z)
  return _internal_z();
}
inline void BBVector3f::_internal_set_z(float value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void BBVector3f::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:BBSerializer.BBVector3f.z)
}

// -------------------------------------------------------------------

// BBVector3i

// int32 x = 1;
inline bool BBVector3i::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BBVector3i::has_x() const {
  return _internal_has_x();
}
inline void BBVector3i::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BBVector3i::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BBVector3i::x() const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBVector3i.x)
  return _internal_x();
}
inline void BBVector3i::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void BBVector3i::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:BBSerializer.BBVector3i.x)
}

// int32 y = 2;
inline bool BBVector3i::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BBVector3i::has_y() const {
  return _internal_has_y();
}
inline void BBVector3i::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BBVector3i::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BBVector3i::y() const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBVector3i.y)
  return _internal_y();
}
inline void BBVector3i::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void BBVector3i::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:BBSerializer.BBVector3i.y)
}

// int32 z = 3;
inline bool BBVector3i::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BBVector3i::has_z() const {
  return _internal_has_z();
}
inline void BBVector3i::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BBVector3i::_internal_z() const {
  return z_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BBVector3i::z() const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBVector3i.z)
  return _internal_z();
}
inline void BBVector3i::_internal_set_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void BBVector3i::set_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:BBSerializer.BBVector3i.z)
}

// -------------------------------------------------------------------

// BBVector4f

// float x = 1;
inline bool BBVector4f::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BBVector4f::has_x() const {
  return _internal_has_x();
}
inline void BBVector4f::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float BBVector4f::_internal_x() const {
  return x_;
}
inline float BBVector4f::x() const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBVector4f.x)
  return _internal_x();
}
inline void BBVector4f::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void BBVector4f::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:BBSerializer.BBVector4f.x)
}

// float y = 2;
inline bool BBVector4f::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BBVector4f::has_y() const {
  return _internal_has_y();
}
inline void BBVector4f::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float BBVector4f::_internal_y() const {
  return y_;
}
inline float BBVector4f::y() const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBVector4f.y)
  return _internal_y();
}
inline void BBVector4f::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void BBVector4f::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:BBSerializer.BBVector4f.y)
}

// float z = 3;
inline bool BBVector4f::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BBVector4f::has_z() const {
  return _internal_has_z();
}
inline void BBVector4f::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float BBVector4f::_internal_z() const {
  return z_;
}
inline float BBVector4f::z() const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBVector4f.z)
  return _internal_z();
}
inline void BBVector4f::_internal_set_z(float value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void BBVector4f::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:BBSerializer.BBVector4f.z)
}

// float w = 4;
inline bool BBVector4f::_internal_has_w() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BBVector4f::has_w() const {
  return _internal_has_w();
}
inline void BBVector4f::clear_w() {
  w_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float BBVector4f::_internal_w() const {
  return w_;
}
inline float BBVector4f::w() const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBVector4f.w)
  return _internal_w();
}
inline void BBVector4f::_internal_set_w(float value) {
  _has_bits_[0] |= 0x00000008u;
  w_ = value;
}
inline void BBVector4f::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:BBSerializer.BBVector4f.w)
}

// -------------------------------------------------------------------

// BBVector4i

// int32 x = 1;
inline bool BBVector4i::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BBVector4i::has_x() const {
  return _internal_has_x();
}
inline void BBVector4i::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BBVector4i::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BBVector4i::x() const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBVector4i.x)
  return _internal_x();
}
inline void BBVector4i::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void BBVector4i::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:BBSerializer.BBVector4i.x)
}

// int32 y = 2;
inline bool BBVector4i::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BBVector4i::has_y() const {
  return _internal_has_y();
}
inline void BBVector4i::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BBVector4i::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BBVector4i::y() const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBVector4i.y)
  return _internal_y();
}
inline void BBVector4i::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void BBVector4i::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:BBSerializer.BBVector4i.y)
}

// int32 z = 3;
inline bool BBVector4i::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BBVector4i::has_z() const {
  return _internal_has_z();
}
inline void BBVector4i::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BBVector4i::_internal_z() const {
  return z_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BBVector4i::z() const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBVector4i.z)
  return _internal_z();
}
inline void BBVector4i::_internal_set_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void BBVector4i::set_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:BBSerializer.BBVector4i.z)
}

// int32 w = 4;
inline bool BBVector4i::_internal_has_w() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BBVector4i::has_w() const {
  return _internal_has_w();
}
inline void BBVector4i::clear_w() {
  w_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BBVector4i::_internal_w() const {
  return w_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BBVector4i::w() const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBVector4i.w)
  return _internal_w();
}
inline void BBVector4i::_internal_set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  w_ = value;
}
inline void BBVector4i::set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:BBSerializer.BBVector4i.w)
}

// -------------------------------------------------------------------

// BBMatrix4f

// repeated float data = 1;
inline int BBMatrix4f::_internal_data_size() const {
  return data_.size();
}
inline int BBMatrix4f::data_size() const {
  return _internal_data_size();
}
inline void BBMatrix4f::clear_data() {
  data_.Clear();
}
inline float BBMatrix4f::_internal_data(int index) const {
  return data_.Get(index);
}
inline float BBMatrix4f::data(int index) const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBMatrix4f.data)
  return _internal_data(index);
}
inline void BBMatrix4f::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:BBSerializer.BBMatrix4f.data)
}
inline void BBMatrix4f::_internal_add_data(float value) {
  data_.Add(value);
}
inline void BBMatrix4f::add_data(float value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:BBSerializer.BBMatrix4f.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BBMatrix4f::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BBMatrix4f::data() const {
  // @@protoc_insertion_point(field_list:BBSerializer.BBMatrix4f.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BBMatrix4f::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BBMatrix4f::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:BBSerializer.BBMatrix4f.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// BBMatrix4fB

// bytes data = 1;
inline bool BBMatrix4fB::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BBMatrix4fB::has_data() const {
  return _internal_has_data();
}
inline void BBMatrix4fB::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BBMatrix4fB::data() const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBMatrix4fB.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void BBMatrix4fB::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:BBSerializer.BBMatrix4fB.data)
}
inline std::string* BBMatrix4fB::mutable_data() {
  // @@protoc_insertion_point(field_mutable:BBSerializer.BBMatrix4fB.data)
  return _internal_mutable_data();
}
inline const std::string& BBMatrix4fB::_internal_data() const {
  return data_.Get();
}
inline void BBMatrix4fB::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* BBMatrix4fB::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BBMatrix4fB::release_data() {
  // @@protoc_insertion_point(field_release:BBSerializer.BBMatrix4fB.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BBMatrix4fB::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BBSerializer.BBMatrix4fB.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace BBSerializer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_BBVector_2eproto
