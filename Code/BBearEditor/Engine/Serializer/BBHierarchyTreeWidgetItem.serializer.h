// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BBHierarchyTreeWidgetItem.proto

#ifndef PROTOBUF_BBHierarchyTreeWidgetItem_2eproto__INCLUDED
#define PROTOBUF_BBHierarchyTreeWidgetItem_2eproto__INCLUDED

#include <string>

#include "common.h"

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include "generated_message_util.h"
#include "repeated_field.h"
#include "extension_set.h"
// @@protoc_insertion_point(includes)

namespace Serializer {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BBHierarchyTreeWidgetItem_2eproto();
void protobuf_AssignDesc_BBHierarchyTreeWidgetItem_2eproto();
void protobuf_ShutdownFile_BBHierarchyTreeWidgetItem_2eproto();

class BBHierarchyTreeWidgetItem;

// ===================================================================

class BBHierarchyTreeWidgetItem : public ::google::protobuf::MessageLite {
 public:
  BBHierarchyTreeWidgetItem();
  virtual ~BBHierarchyTreeWidgetItem();
  
  BBHierarchyTreeWidgetItem(const BBHierarchyTreeWidgetItem& from);
  
  inline BBHierarchyTreeWidgetItem& operator=(const BBHierarchyTreeWidgetItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BBHierarchyTreeWidgetItem& default_instance();
  
  void Swap(BBHierarchyTreeWidgetItem* other);
  
  // implements Message ----------------------------------------------
  
  BBHierarchyTreeWidgetItem* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BBHierarchyTreeWidgetItem& from);
  void MergeFrom(const BBHierarchyTreeWidgetItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // repeated int32 children = 2;
  inline int children_size() const;
  inline void clear_children();
  static const int kChildrenFieldNumber = 2;
  inline ::google::protobuf::int32 children(int index) const;
  inline void set_children(int index, ::google::protobuf::int32 value);
  inline void add_children(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      children() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_children();
  
  // @@protoc_insertion_point(class_scope:Serializer.BBHierarchyTreeWidgetItem)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > children_;
  ::google::protobuf::int32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_BBHierarchyTreeWidgetItem_2eproto();
  friend void protobuf_AssignDesc_BBHierarchyTreeWidgetItem_2eproto();
  friend void protobuf_ShutdownFile_BBHierarchyTreeWidgetItem_2eproto();
  
  void InitAsDefaultInstance();
  static BBHierarchyTreeWidgetItem* default_instance_;
};
// ===================================================================


// ===================================================================

// BBHierarchyTreeWidgetItem

// optional int32 index = 1;
inline bool BBHierarchyTreeWidgetItem::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BBHierarchyTreeWidgetItem::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BBHierarchyTreeWidgetItem::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BBHierarchyTreeWidgetItem::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 BBHierarchyTreeWidgetItem::index() const {
  return index_;
}
inline void BBHierarchyTreeWidgetItem::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// repeated int32 children = 2;
inline int BBHierarchyTreeWidgetItem::children_size() const {
  return children_.size();
}
inline void BBHierarchyTreeWidgetItem::clear_children() {
  children_.Clear();
}
inline ::google::protobuf::int32 BBHierarchyTreeWidgetItem::children(int index) const {
  return children_.Get(index);
}
inline void BBHierarchyTreeWidgetItem::set_children(int index, ::google::protobuf::int32 value) {
  children_.Set(index, value);
}
inline void BBHierarchyTreeWidgetItem::add_children(::google::protobuf::int32 value) {
  children_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BBHierarchyTreeWidgetItem::children() const {
  return children_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BBHierarchyTreeWidgetItem::mutable_children() {
  return &children_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serializer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BBHierarchyTreeWidgetItem_2eproto__INCLUDED
