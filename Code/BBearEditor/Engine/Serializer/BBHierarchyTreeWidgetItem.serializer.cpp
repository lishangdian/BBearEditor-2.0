// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BBHierarchyTreeWidgetItem.serializer.h"

#include <algorithm>

#include "once.h"
#include "coded_stream.h"
#include "wire_format_lite_inl.h"
// @@protoc_insertion_point(includes)

namespace Serializer {

void protobuf_ShutdownFile_BBHierarchyTreeWidgetItem_2eproto() {
  delete BBHierarchyTreeWidgetItem::default_instance_;
}

void protobuf_AddDesc_BBHierarchyTreeWidgetItem_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  BBHierarchyTreeWidgetItem::default_instance_ = new BBHierarchyTreeWidgetItem();
  BBHierarchyTreeWidgetItem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BBHierarchyTreeWidgetItem_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BBHierarchyTreeWidgetItem_2eproto {
  StaticDescriptorInitializer_BBHierarchyTreeWidgetItem_2eproto() {
    protobuf_AddDesc_BBHierarchyTreeWidgetItem_2eproto();
  }
} static_descriptor_initializer_BBHierarchyTreeWidgetItem_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int BBHierarchyTreeWidgetItem::kIndexFieldNumber;
const int BBHierarchyTreeWidgetItem::kChildrenFieldNumber;
#endif  // !_MSC_VER

BBHierarchyTreeWidgetItem::BBHierarchyTreeWidgetItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BBHierarchyTreeWidgetItem::InitAsDefaultInstance() {
}

BBHierarchyTreeWidgetItem::BBHierarchyTreeWidgetItem(const BBHierarchyTreeWidgetItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BBHierarchyTreeWidgetItem::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BBHierarchyTreeWidgetItem::~BBHierarchyTreeWidgetItem() {
  SharedDtor();
}

void BBHierarchyTreeWidgetItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BBHierarchyTreeWidgetItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BBHierarchyTreeWidgetItem& BBHierarchyTreeWidgetItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BBHierarchyTreeWidgetItem_2eproto();  return *default_instance_;
}

BBHierarchyTreeWidgetItem* BBHierarchyTreeWidgetItem::default_instance_ = NULL;

BBHierarchyTreeWidgetItem* BBHierarchyTreeWidgetItem::New() const {
  return new BBHierarchyTreeWidgetItem;
}

void BBHierarchyTreeWidgetItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
  }
  children_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BBHierarchyTreeWidgetItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_children;
        break;
      }
      
      // repeated int32 children = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_children:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_children())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_children())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_children;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BBHierarchyTreeWidgetItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // repeated int32 children = 2;
  for (int i = 0; i < this->children_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->children(i), output);
  }
  
}

int BBHierarchyTreeWidgetItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
  }
  // repeated int32 children = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->children_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->children(i));
    }
    total_size += 1 * this->children_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BBHierarchyTreeWidgetItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BBHierarchyTreeWidgetItem*>(&from));
}

void BBHierarchyTreeWidgetItem::MergeFrom(const BBHierarchyTreeWidgetItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  children_.MergeFrom(from.children_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
}

void BBHierarchyTreeWidgetItem::CopyFrom(const BBHierarchyTreeWidgetItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BBHierarchyTreeWidgetItem::IsInitialized() const {
  
  return true;
}

void BBHierarchyTreeWidgetItem::Swap(BBHierarchyTreeWidgetItem* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    children_.Swap(&other->children_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BBHierarchyTreeWidgetItem::GetTypeName() const {
  return "Serializer.BBHierarchyTreeWidgetItem";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serializer

// @@protoc_insertion_point(global_scope)
