// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BBCubeMap.proto

#include "BBCubeMap.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace BBSerializer {
constexpr BBCubeMap::BBCubeMap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : positivex_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , negativex_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , positivey_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , negativey_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , positivez_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , negativez_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BBCubeMapDefaultTypeInternal {
  constexpr BBCubeMapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BBCubeMapDefaultTypeInternal() {}
  union {
    BBCubeMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BBCubeMapDefaultTypeInternal _BBCubeMap_default_instance_;
}  // namespace BBSerializer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_BBCubeMap_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_BBCubeMap_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_BBCubeMap_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_BBCubeMap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::BBSerializer::BBCubeMap, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::BBSerializer::BBCubeMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BBSerializer::BBCubeMap, positivex_),
  PROTOBUF_FIELD_OFFSET(::BBSerializer::BBCubeMap, negativex_),
  PROTOBUF_FIELD_OFFSET(::BBSerializer::BBCubeMap, positivey_),
  PROTOBUF_FIELD_OFFSET(::BBSerializer::BBCubeMap, negativey_),
  PROTOBUF_FIELD_OFFSET(::BBSerializer::BBCubeMap, positivez_),
  PROTOBUF_FIELD_OFFSET(::BBSerializer::BBCubeMap, negativez_),
  0,
  1,
  2,
  3,
  4,
  5,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::BBSerializer::BBCubeMap)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BBSerializer::_BBCubeMap_default_instance_),
};

const char descriptor_table_protodef_BBCubeMap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017BBCubeMap.proto\022\014BBSerializer\"\357\001\n\tBBCu"
  "beMap\022\026\n\tpositiveX\030\001 \001(\tH\000\210\001\001\022\026\n\tnegativ"
  "eX\030\002 \001(\tH\001\210\001\001\022\026\n\tpositiveY\030\003 \001(\tH\002\210\001\001\022\026\n"
  "\tnegativeY\030\004 \001(\tH\003\210\001\001\022\026\n\tpositiveZ\030\005 \001(\t"
  "H\004\210\001\001\022\026\n\tnegativeZ\030\006 \001(\tH\005\210\001\001B\014\n\n_positi"
  "veXB\014\n\n_negativeXB\014\n\n_positiveYB\014\n\n_nega"
  "tiveYB\014\n\n_positiveZB\014\n\n_negativeZb\006proto"
  "3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_BBCubeMap_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_BBCubeMap_2eproto = {
  false, false, 281, descriptor_table_protodef_BBCubeMap_2eproto, "BBCubeMap.proto", 
  &descriptor_table_BBCubeMap_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_BBCubeMap_2eproto::offsets,
  file_level_metadata_BBCubeMap_2eproto, file_level_enum_descriptors_BBCubeMap_2eproto, file_level_service_descriptors_BBCubeMap_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_BBCubeMap_2eproto_getter() {
  return &descriptor_table_BBCubeMap_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_BBCubeMap_2eproto(&descriptor_table_BBCubeMap_2eproto);
namespace BBSerializer {

// ===================================================================

class BBCubeMap::_Internal {
 public:
  using HasBits = decltype(std::declval<BBCubeMap>()._has_bits_);
  static void set_has_positivex(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_negativex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_positivey(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_negativey(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_positivez(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_negativez(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

BBCubeMap::BBCubeMap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BBSerializer.BBCubeMap)
}
BBCubeMap::BBCubeMap(const BBCubeMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  positivex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_positivex()) {
    positivex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_positivex(), 
      GetArena());
  }
  negativex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_negativex()) {
    negativex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_negativex(), 
      GetArena());
  }
  positivey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_positivey()) {
    positivey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_positivey(), 
      GetArena());
  }
  negativey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_negativey()) {
    negativey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_negativey(), 
      GetArena());
  }
  positivez_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_positivez()) {
    positivez_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_positivez(), 
      GetArena());
  }
  negativez_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_negativez()) {
    negativez_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_negativez(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:BBSerializer.BBCubeMap)
}

void BBCubeMap::SharedCtor() {
positivex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
negativex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
positivey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
negativey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
positivez_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
negativez_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BBCubeMap::~BBCubeMap() {
  // @@protoc_insertion_point(destructor:BBSerializer.BBCubeMap)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BBCubeMap::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  positivex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  negativex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  positivey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  negativey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  positivez_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  negativez_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BBCubeMap::ArenaDtor(void* object) {
  BBCubeMap* _this = reinterpret_cast< BBCubeMap* >(object);
  (void)_this;
}
void BBCubeMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BBCubeMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BBCubeMap::Clear() {
// @@protoc_insertion_point(message_clear_start:BBSerializer.BBCubeMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      positivex_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      negativex_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      positivey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      negativey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      positivez_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      negativez_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BBCubeMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string positiveX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_positivex();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BBSerializer.BBCubeMap.positiveX"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string negativeX = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_negativex();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BBSerializer.BBCubeMap.negativeX"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string positiveY = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_positivey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BBSerializer.BBCubeMap.positiveY"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string negativeY = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_negativey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BBSerializer.BBCubeMap.negativeY"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string positiveZ = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_positivez();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BBSerializer.BBCubeMap.positiveZ"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string negativeZ = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_negativez();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BBSerializer.BBCubeMap.negativeZ"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BBCubeMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BBSerializer.BBCubeMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string positiveX = 1;
  if (_internal_has_positivex()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_positivex().data(), static_cast<int>(this->_internal_positivex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BBSerializer.BBCubeMap.positiveX");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_positivex(), target);
  }

  // string negativeX = 2;
  if (_internal_has_negativex()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_negativex().data(), static_cast<int>(this->_internal_negativex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BBSerializer.BBCubeMap.negativeX");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_negativex(), target);
  }

  // string positiveY = 3;
  if (_internal_has_positivey()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_positivey().data(), static_cast<int>(this->_internal_positivey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BBSerializer.BBCubeMap.positiveY");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_positivey(), target);
  }

  // string negativeY = 4;
  if (_internal_has_negativey()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_negativey().data(), static_cast<int>(this->_internal_negativey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BBSerializer.BBCubeMap.negativeY");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_negativey(), target);
  }

  // string positiveZ = 5;
  if (_internal_has_positivez()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_positivez().data(), static_cast<int>(this->_internal_positivez().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BBSerializer.BBCubeMap.positiveZ");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_positivez(), target);
  }

  // string negativeZ = 6;
  if (_internal_has_negativez()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_negativez().data(), static_cast<int>(this->_internal_negativez().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BBSerializer.BBCubeMap.negativeZ");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_negativez(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BBSerializer.BBCubeMap)
  return target;
}

size_t BBCubeMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BBSerializer.BBCubeMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // string positiveX = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_positivex());
    }

    // string negativeX = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_negativex());
    }

    // string positiveY = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_positivey());
    }

    // string negativeY = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_negativey());
    }

    // string positiveZ = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_positivez());
    }

    // string negativeZ = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_negativez());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BBCubeMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BBSerializer.BBCubeMap)
  GOOGLE_DCHECK_NE(&from, this);
  const BBCubeMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BBCubeMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BBSerializer.BBCubeMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BBSerializer.BBCubeMap)
    MergeFrom(*source);
  }
}

void BBCubeMap::MergeFrom(const BBCubeMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BBSerializer.BBCubeMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_positivex(from._internal_positivex());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_negativex(from._internal_negativex());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_positivey(from._internal_positivey());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_negativey(from._internal_negativey());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_positivez(from._internal_positivez());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_negativez(from._internal_negativez());
    }
  }
}

void BBCubeMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BBSerializer.BBCubeMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BBCubeMap::CopyFrom(const BBCubeMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BBSerializer.BBCubeMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BBCubeMap::IsInitialized() const {
  return true;
}

void BBCubeMap::InternalSwap(BBCubeMap* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  positivex_.Swap(&other->positivex_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  negativex_.Swap(&other->negativex_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  positivey_.Swap(&other->positivey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  negativey_.Swap(&other->negativey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  positivez_.Swap(&other->positivez_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  negativez_.Swap(&other->negativez_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BBCubeMap::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_BBCubeMap_2eproto_getter, &descriptor_table_BBCubeMap_2eproto_once,
      file_level_metadata_BBCubeMap_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace BBSerializer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::BBSerializer::BBCubeMap* Arena::CreateMaybeMessage< ::BBSerializer::BBCubeMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BBSerializer::BBCubeMap >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
