// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BBGameObject.proto

#include "BBGameObject.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace BBSerializer {
constexpr BBGameObject::BBGameObject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , classname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filepath_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , position_(nullptr)
  , localposition_(nullptr)
  , rotation_(nullptr)
  , localrotation_(nullptr)
  , scale_(nullptr)
  , localscale_(nullptr)
  , index_(0){}
struct BBGameObjectDefaultTypeInternal {
  constexpr BBGameObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BBGameObjectDefaultTypeInternal() {}
  union {
    BBGameObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BBGameObjectDefaultTypeInternal _BBGameObject_default_instance_;
}  // namespace BBSerializer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_BBGameObject_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_BBGameObject_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_BBGameObject_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_BBGameObject_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::BBSerializer::BBGameObject, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::BBSerializer::BBGameObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BBSerializer::BBGameObject, index_),
  PROTOBUF_FIELD_OFFSET(::BBSerializer::BBGameObject, name_),
  PROTOBUF_FIELD_OFFSET(::BBSerializer::BBGameObject, classname_),
  PROTOBUF_FIELD_OFFSET(::BBSerializer::BBGameObject, filepath_),
  PROTOBUF_FIELD_OFFSET(::BBSerializer::BBGameObject, position_),
  PROTOBUF_FIELD_OFFSET(::BBSerializer::BBGameObject, localposition_),
  PROTOBUF_FIELD_OFFSET(::BBSerializer::BBGameObject, rotation_),
  PROTOBUF_FIELD_OFFSET(::BBSerializer::BBGameObject, localrotation_),
  PROTOBUF_FIELD_OFFSET(::BBSerializer::BBGameObject, scale_),
  PROTOBUF_FIELD_OFFSET(::BBSerializer::BBGameObject, localscale_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::BBSerializer::BBGameObject)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BBSerializer::_BBGameObject_default_instance_),
};

const char descriptor_table_protodef_BBGameObject_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022BBGameObject.proto\022\014BBSerializer\032\016BBVe"
  "ctor.proto\"\211\004\n\014BBGameObject\022\r\n\005index\030\001 \001"
  "(\005\022\021\n\004name\030\002 \001(\tH\000\210\001\001\022\026\n\tclassName\030\003 \001(\t"
  "H\001\210\001\001\022\025\n\010filePath\030\004 \001(\tH\002\210\001\001\022/\n\010position"
  "\030\005 \001(\0132\030.BBSerializer.BBVector3fH\003\210\001\001\0224\n"
  "\rlocalPosition\030\006 \001(\0132\030.BBSerializer.BBVe"
  "ctor3fH\004\210\001\001\022/\n\010rotation\030\007 \001(\0132\030.BBSerial"
  "izer.BBVector3fH\005\210\001\001\0224\n\rlocalRotation\030\010 "
  "\001(\0132\030.BBSerializer.BBVector3fH\006\210\001\001\022,\n\005sc"
  "ale\030\t \001(\0132\030.BBSerializer.BBVector3fH\007\210\001\001"
  "\0221\n\nlocalScale\030\n \001(\0132\030.BBSerializer.BBVe"
  "ctor3fH\010\210\001\001B\007\n\005_nameB\014\n\n_classNameB\013\n\t_f"
  "ilePathB\013\n\t_positionB\020\n\016_localPositionB\013"
  "\n\t_rotationB\020\n\016_localRotationB\010\n\006_scaleB"
  "\r\n\013_localScaleb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_BBGameObject_2eproto_deps[1] = {
  &::descriptor_table_BBVector_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_BBGameObject_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_BBGameObject_2eproto = {
  false, false, 582, descriptor_table_protodef_BBGameObject_2eproto, "BBGameObject.proto", 
  &descriptor_table_BBGameObject_2eproto_once, descriptor_table_BBGameObject_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_BBGameObject_2eproto::offsets,
  file_level_metadata_BBGameObject_2eproto, file_level_enum_descriptors_BBGameObject_2eproto, file_level_service_descriptors_BBGameObject_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_BBGameObject_2eproto_getter() {
  return &descriptor_table_BBGameObject_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_BBGameObject_2eproto(&descriptor_table_BBGameObject_2eproto);
namespace BBSerializer {

// ===================================================================

class BBGameObject::_Internal {
 public:
  using HasBits = decltype(std::declval<BBGameObject>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_classname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_filepath(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::BBSerializer::BBVector3f& position(const BBGameObject* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::BBSerializer::BBVector3f& localposition(const BBGameObject* msg);
  static void set_has_localposition(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::BBSerializer::BBVector3f& rotation(const BBGameObject* msg);
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::BBSerializer::BBVector3f& localrotation(const BBGameObject* msg);
  static void set_has_localrotation(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::BBSerializer::BBVector3f& scale(const BBGameObject* msg);
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::BBSerializer::BBVector3f& localscale(const BBGameObject* msg);
  static void set_has_localscale(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::BBSerializer::BBVector3f&
BBGameObject::_Internal::position(const BBGameObject* msg) {
  return *msg->position_;
}
const ::BBSerializer::BBVector3f&
BBGameObject::_Internal::localposition(const BBGameObject* msg) {
  return *msg->localposition_;
}
const ::BBSerializer::BBVector3f&
BBGameObject::_Internal::rotation(const BBGameObject* msg) {
  return *msg->rotation_;
}
const ::BBSerializer::BBVector3f&
BBGameObject::_Internal::localrotation(const BBGameObject* msg) {
  return *msg->localrotation_;
}
const ::BBSerializer::BBVector3f&
BBGameObject::_Internal::scale(const BBGameObject* msg) {
  return *msg->scale_;
}
const ::BBSerializer::BBVector3f&
BBGameObject::_Internal::localscale(const BBGameObject* msg) {
  return *msg->localscale_;
}
void BBGameObject::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  _has_bits_[0] &= ~0x00000008u;
}
void BBGameObject::clear_localposition() {
  if (GetArena() == nullptr && localposition_ != nullptr) {
    delete localposition_;
  }
  localposition_ = nullptr;
  _has_bits_[0] &= ~0x00000010u;
}
void BBGameObject::clear_rotation() {
  if (GetArena() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
  _has_bits_[0] &= ~0x00000020u;
}
void BBGameObject::clear_localrotation() {
  if (GetArena() == nullptr && localrotation_ != nullptr) {
    delete localrotation_;
  }
  localrotation_ = nullptr;
  _has_bits_[0] &= ~0x00000040u;
}
void BBGameObject::clear_scale() {
  if (GetArena() == nullptr && scale_ != nullptr) {
    delete scale_;
  }
  scale_ = nullptr;
  _has_bits_[0] &= ~0x00000080u;
}
void BBGameObject::clear_localscale() {
  if (GetArena() == nullptr && localscale_ != nullptr) {
    delete localscale_;
  }
  localscale_ = nullptr;
  _has_bits_[0] &= ~0x00000100u;
}
BBGameObject::BBGameObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BBSerializer.BBGameObject)
}
BBGameObject::BBGameObject(const BBGameObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  classname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_classname()) {
    classname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_classname(), 
      GetArena());
  }
  filepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_filepath()) {
    filepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filepath(), 
      GetArena());
  }
  if (from._internal_has_position()) {
    position_ = new ::BBSerializer::BBVector3f(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_localposition()) {
    localposition_ = new ::BBSerializer::BBVector3f(*from.localposition_);
  } else {
    localposition_ = nullptr;
  }
  if (from._internal_has_rotation()) {
    rotation_ = new ::BBSerializer::BBVector3f(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  if (from._internal_has_localrotation()) {
    localrotation_ = new ::BBSerializer::BBVector3f(*from.localrotation_);
  } else {
    localrotation_ = nullptr;
  }
  if (from._internal_has_scale()) {
    scale_ = new ::BBSerializer::BBVector3f(*from.scale_);
  } else {
    scale_ = nullptr;
  }
  if (from._internal_has_localscale()) {
    localscale_ = new ::BBSerializer::BBVector3f(*from.localscale_);
  } else {
    localscale_ = nullptr;
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:BBSerializer.BBGameObject)
}

void BBGameObject::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
classname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
filepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&position_)) + sizeof(index_));
}

BBGameObject::~BBGameObject() {
  // @@protoc_insertion_point(destructor:BBSerializer.BBGameObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BBGameObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  classname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete localposition_;
  if (this != internal_default_instance()) delete rotation_;
  if (this != internal_default_instance()) delete localrotation_;
  if (this != internal_default_instance()) delete scale_;
  if (this != internal_default_instance()) delete localscale_;
}

void BBGameObject::ArenaDtor(void* object) {
  BBGameObject* _this = reinterpret_cast< BBGameObject* >(object);
  (void)_this;
}
void BBGameObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BBGameObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BBGameObject::Clear() {
// @@protoc_insertion_point(message_clear_start:BBSerializer.BBGameObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      classname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      filepath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      if (GetArena() == nullptr && position_ != nullptr) {
        delete position_;
      }
      position_ = nullptr;
    }
    if (cached_has_bits & 0x00000010u) {
      if (GetArena() == nullptr && localposition_ != nullptr) {
        delete localposition_;
      }
      localposition_ = nullptr;
    }
    if (cached_has_bits & 0x00000020u) {
      if (GetArena() == nullptr && rotation_ != nullptr) {
        delete rotation_;
      }
      rotation_ = nullptr;
    }
    if (cached_has_bits & 0x00000040u) {
      if (GetArena() == nullptr && localrotation_ != nullptr) {
        delete localrotation_;
      }
      localrotation_ = nullptr;
    }
    if (cached_has_bits & 0x00000080u) {
      if (GetArena() == nullptr && scale_ != nullptr) {
        delete scale_;
      }
      scale_ = nullptr;
    }
  }
  if (cached_has_bits & 0x00000100u) {
    if (GetArena() == nullptr && localscale_ != nullptr) {
      delete localscale_;
    }
    localscale_ = nullptr;
  }
  index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BBGameObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BBSerializer.BBGameObject.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string className = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_classname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BBSerializer.BBGameObject.className"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string filePath = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_filepath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BBSerializer.BBGameObject.filePath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BBSerializer.BBVector3f position = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BBSerializer.BBVector3f localPosition = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_localposition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BBSerializer.BBVector3f rotation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BBSerializer.BBVector3f localRotation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_localrotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BBSerializer.BBVector3f scale = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BBSerializer.BBVector3f localScale = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_localscale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BBGameObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BBSerializer.BBGameObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // string name = 2;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BBSerializer.BBGameObject.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string className = 3;
  if (_internal_has_classname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_classname().data(), static_cast<int>(this->_internal_classname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BBSerializer.BBGameObject.className");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_classname(), target);
  }

  // string filePath = 4;
  if (_internal_has_filepath()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filepath().data(), static_cast<int>(this->_internal_filepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BBSerializer.BBGameObject.filePath");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_filepath(), target);
  }

  // .BBSerializer.BBVector3f position = 5;
  if (_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::position(this), target, stream);
  }

  // .BBSerializer.BBVector3f localPosition = 6;
  if (_internal_has_localposition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::localposition(this), target, stream);
  }

  // .BBSerializer.BBVector3f rotation = 7;
  if (_internal_has_rotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::rotation(this), target, stream);
  }

  // .BBSerializer.BBVector3f localRotation = 8;
  if (_internal_has_localrotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::localrotation(this), target, stream);
  }

  // .BBSerializer.BBVector3f scale = 9;
  if (_internal_has_scale()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::scale(this), target, stream);
  }

  // .BBSerializer.BBVector3f localScale = 10;
  if (_internal_has_localscale()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::localscale(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BBSerializer.BBGameObject)
  return target;
}

size_t BBGameObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BBSerializer.BBGameObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // string className = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_classname());
    }

    // string filePath = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filepath());
    }

    // .BBSerializer.BBVector3f position = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // .BBSerializer.BBVector3f localPosition = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *localposition_);
    }

    // .BBSerializer.BBVector3f rotation = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rotation_);
    }

    // .BBSerializer.BBVector3f localRotation = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *localrotation_);
    }

    // .BBSerializer.BBVector3f scale = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scale_);
    }

  }
  // .BBSerializer.BBVector3f localScale = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *localscale_);
  }

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BBGameObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BBSerializer.BBGameObject)
  GOOGLE_DCHECK_NE(&from, this);
  const BBGameObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BBGameObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BBSerializer.BBGameObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BBSerializer.BBGameObject)
    MergeFrom(*source);
  }
}

void BBGameObject::MergeFrom(const BBGameObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BBSerializer.BBGameObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_classname(from._internal_classname());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_filepath(from._internal_filepath());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_position()->::BBSerializer::BBVector3f::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_localposition()->::BBSerializer::BBVector3f::MergeFrom(from._internal_localposition());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_rotation()->::BBSerializer::BBVector3f::MergeFrom(from._internal_rotation());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_localrotation()->::BBSerializer::BBVector3f::MergeFrom(from._internal_localrotation());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_scale()->::BBSerializer::BBVector3f::MergeFrom(from._internal_scale());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_mutable_localscale()->::BBSerializer::BBVector3f::MergeFrom(from._internal_localscale());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void BBGameObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BBSerializer.BBGameObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BBGameObject::CopyFrom(const BBGameObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BBSerializer.BBGameObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BBGameObject::IsInitialized() const {
  return true;
}

void BBGameObject::InternalSwap(BBGameObject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  classname_.Swap(&other->classname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  filepath_.Swap(&other->filepath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BBGameObject, index_)
      + sizeof(BBGameObject::index_)
      - PROTOBUF_FIELD_OFFSET(BBGameObject, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BBGameObject::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_BBGameObject_2eproto_getter, &descriptor_table_BBGameObject_2eproto_once,
      file_level_metadata_BBGameObject_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace BBSerializer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::BBSerializer::BBGameObject* Arena::CreateMaybeMessage< ::BBSerializer::BBGameObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BBSerializer::BBGameObject >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
