// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BBGameObject.serializer.h"

#include <algorithm>

#include "once.h"
#include "coded_stream.h"
#include "wire_format_lite_inl.h"
// @@protoc_insertion_point(includes)

namespace BBSerializer {

void protobuf_ShutdownFile_BBGameObject_2eproto() {
  delete BBGameObject::default_instance_;
}

void protobuf_AddDesc_BBGameObject_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::BBSerializer::protobuf_AddDesc_BBVector_2eproto();
  BBGameObject::default_instance_ = new BBGameObject();
  BBGameObject::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BBGameObject_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BBGameObject_2eproto {
  StaticDescriptorInitializer_BBGameObject_2eproto() {
    protobuf_AddDesc_BBGameObject_2eproto();
  }
} static_descriptor_initializer_BBGameObject_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int BBGameObject::kIndexFieldNumber;
const int BBGameObject::kNameFieldNumber;
const int BBGameObject::kClassNameFieldNumber;
const int BBGameObject::kIconNameFieldNumber;
const int BBGameObject::kFilePathFieldNumber;
const int BBGameObject::kPositionFieldNumber;
const int BBGameObject::kLocalPositionFieldNumber;
const int BBGameObject::kRotationFieldNumber;
const int BBGameObject::kLocalRotationFieldNumber;
const int BBGameObject::kQuaternionFieldNumber;
const int BBGameObject::kLocalQuaternionFieldNumber;
const int BBGameObject::kScaleFieldNumber;
const int BBGameObject::kLocalScaleFieldNumber;
#endif  // !_MSC_VER

BBGameObject::BBGameObject()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BBGameObject::InitAsDefaultInstance() {
  position_ = const_cast< ::BBSerializer::BBVector3f*>(&::BBSerializer::BBVector3f::default_instance());
  localposition_ = const_cast< ::BBSerializer::BBVector3f*>(&::BBSerializer::BBVector3f::default_instance());
  rotation_ = const_cast< ::BBSerializer::BBVector3f*>(&::BBSerializer::BBVector3f::default_instance());
  localrotation_ = const_cast< ::BBSerializer::BBVector3f*>(&::BBSerializer::BBVector3f::default_instance());
  quaternion_ = const_cast< ::BBSerializer::BBVector4f*>(&::BBSerializer::BBVector4f::default_instance());
  localquaternion_ = const_cast< ::BBSerializer::BBVector4f*>(&::BBSerializer::BBVector4f::default_instance());
  scale_ = const_cast< ::BBSerializer::BBVector3f*>(&::BBSerializer::BBVector3f::default_instance());
  localscale_ = const_cast< ::BBSerializer::BBVector3f*>(&::BBSerializer::BBVector3f::default_instance());
}

BBGameObject::BBGameObject(const BBGameObject& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BBGameObject::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  classname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iconname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  position_ = NULL;
  localposition_ = NULL;
  rotation_ = NULL;
  localrotation_ = NULL;
  quaternion_ = NULL;
  localquaternion_ = NULL;
  scale_ = NULL;
  localscale_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BBGameObject::~BBGameObject() {
  SharedDtor();
}

void BBGameObject::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (classname_ != &::google::protobuf::internal::kEmptyString) {
    delete classname_;
  }
  if (iconname_ != &::google::protobuf::internal::kEmptyString) {
    delete iconname_;
  }
  if (filepath_ != &::google::protobuf::internal::kEmptyString) {
    delete filepath_;
  }
  if (this != default_instance_) {
    delete position_;
    delete localposition_;
    delete rotation_;
    delete localrotation_;
    delete quaternion_;
    delete localquaternion_;
    delete scale_;
    delete localscale_;
  }
}

void BBGameObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BBGameObject& BBGameObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BBGameObject_2eproto();  return *default_instance_;
}

BBGameObject* BBGameObject::default_instance_ = NULL;

BBGameObject* BBGameObject::New() const {
  return new BBGameObject;
}

void BBGameObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_classname()) {
      if (classname_ != &::google::protobuf::internal::kEmptyString) {
        classname_->clear();
      }
    }
    if (has_iconname()) {
      if (iconname_ != &::google::protobuf::internal::kEmptyString) {
        iconname_->clear();
      }
    }
    if (has_filepath()) {
      if (filepath_ != &::google::protobuf::internal::kEmptyString) {
        filepath_->clear();
      }
    }
    if (has_position()) {
      if (position_ != NULL) position_->::BBSerializer::BBVector3f::Clear();
    }
    if (has_localposition()) {
      if (localposition_ != NULL) localposition_->::BBSerializer::BBVector3f::Clear();
    }
    if (has_rotation()) {
      if (rotation_ != NULL) rotation_->::BBSerializer::BBVector3f::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_localrotation()) {
      if (localrotation_ != NULL) localrotation_->::BBSerializer::BBVector3f::Clear();
    }
    if (has_quaternion()) {
      if (quaternion_ != NULL) quaternion_->::BBSerializer::BBVector4f::Clear();
    }
    if (has_localquaternion()) {
      if (localquaternion_ != NULL) localquaternion_->::BBSerializer::BBVector4f::Clear();
    }
    if (has_scale()) {
      if (scale_ != NULL) scale_->::BBSerializer::BBVector3f::Clear();
    }
    if (has_localscale()) {
      if (localscale_ != NULL) localscale_->::BBSerializer::BBVector3f::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BBGameObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_className;
        break;
      }
      
      // optional string className = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_className:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_iconName;
        break;
      }
      
      // optional string iconName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_iconName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iconname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_filePath;
        break;
      }
      
      // optional string filePath = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filepath()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_position;
        break;
      }
      
      // optional .BBSerializer.BBVector3f position = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_localPosition;
        break;
      }
      
      // optional .BBSerializer.BBVector3f localPosition = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_localPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_localposition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_rotation;
        break;
      }
      
      // optional .BBSerializer.BBVector3f rotation = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_localRotation;
        break;
      }
      
      // optional .BBSerializer.BBVector3f localRotation = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_localRotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_localrotation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_quaternion;
        break;
      }
      
      // optional .BBSerializer.BBVector4f quaternion = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quaternion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quaternion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_localQuaternion;
        break;
      }
      
      // optional .BBSerializer.BBVector4f localQuaternion = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_localQuaternion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_localquaternion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_scale;
        break;
      }
      
      // optional .BBSerializer.BBVector3f scale = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_localScale;
        break;
      }
      
      // optional .BBSerializer.BBVector3f localScale = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_localScale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_localscale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BBGameObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string className = 3;
  if (has_classname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->classname(), output);
  }
  
  // optional string iconName = 4;
  if (has_iconname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->iconname(), output);
  }
  
  // optional string filePath = 5;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->filepath(), output);
  }
  
  // optional .BBSerializer.BBVector3f position = 6;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->position(), output);
  }
  
  // optional .BBSerializer.BBVector3f localPosition = 7;
  if (has_localposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->localposition(), output);
  }
  
  // optional .BBSerializer.BBVector3f rotation = 8;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->rotation(), output);
  }
  
  // optional .BBSerializer.BBVector3f localRotation = 9;
  if (has_localrotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->localrotation(), output);
  }
  
  // optional .BBSerializer.BBVector4f quaternion = 10;
  if (has_quaternion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->quaternion(), output);
  }
  
  // optional .BBSerializer.BBVector4f localQuaternion = 11;
  if (has_localquaternion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->localquaternion(), output);
  }
  
  // optional .BBSerializer.BBVector3f scale = 12;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->scale(), output);
  }
  
  // optional .BBSerializer.BBVector3f localScale = 13;
  if (has_localscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->localscale(), output);
  }
  
}

int BBGameObject::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string className = 3;
    if (has_classname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classname());
    }
    
    // optional string iconName = 4;
    if (has_iconname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iconname());
    }
    
    // optional string filePath = 5;
    if (has_filepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filepath());
    }
    
    // optional .BBSerializer.BBVector3f position = 6;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }
    
    // optional .BBSerializer.BBVector3f localPosition = 7;
    if (has_localposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->localposition());
    }
    
    // optional .BBSerializer.BBVector3f rotation = 8;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotation());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .BBSerializer.BBVector3f localRotation = 9;
    if (has_localrotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->localrotation());
    }
    
    // optional .BBSerializer.BBVector4f quaternion = 10;
    if (has_quaternion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quaternion());
    }
    
    // optional .BBSerializer.BBVector4f localQuaternion = 11;
    if (has_localquaternion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->localquaternion());
    }
    
    // optional .BBSerializer.BBVector3f scale = 12;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scale());
    }
    
    // optional .BBSerializer.BBVector3f localScale = 13;
    if (has_localscale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->localscale());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BBGameObject::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BBGameObject*>(&from));
}

void BBGameObject::MergeFrom(const BBGameObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_classname()) {
      set_classname(from.classname());
    }
    if (from.has_iconname()) {
      set_iconname(from.iconname());
    }
    if (from.has_filepath()) {
      set_filepath(from.filepath());
    }
    if (from.has_position()) {
      mutable_position()->::BBSerializer::BBVector3f::MergeFrom(from.position());
    }
    if (from.has_localposition()) {
      mutable_localposition()->::BBSerializer::BBVector3f::MergeFrom(from.localposition());
    }
    if (from.has_rotation()) {
      mutable_rotation()->::BBSerializer::BBVector3f::MergeFrom(from.rotation());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_localrotation()) {
      mutable_localrotation()->::BBSerializer::BBVector3f::MergeFrom(from.localrotation());
    }
    if (from.has_quaternion()) {
      mutable_quaternion()->::BBSerializer::BBVector4f::MergeFrom(from.quaternion());
    }
    if (from.has_localquaternion()) {
      mutable_localquaternion()->::BBSerializer::BBVector4f::MergeFrom(from.localquaternion());
    }
    if (from.has_scale()) {
      mutable_scale()->::BBSerializer::BBVector3f::MergeFrom(from.scale());
    }
    if (from.has_localscale()) {
      mutable_localscale()->::BBSerializer::BBVector3f::MergeFrom(from.localscale());
    }
  }
}

void BBGameObject::CopyFrom(const BBGameObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BBGameObject::IsInitialized() const {
  
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_localposition()) {
    if (!this->localposition().IsInitialized()) return false;
  }
  if (has_rotation()) {
    if (!this->rotation().IsInitialized()) return false;
  }
  if (has_localrotation()) {
    if (!this->localrotation().IsInitialized()) return false;
  }
  if (has_quaternion()) {
    if (!this->quaternion().IsInitialized()) return false;
  }
  if (has_localquaternion()) {
    if (!this->localquaternion().IsInitialized()) return false;
  }
  if (has_scale()) {
    if (!this->scale().IsInitialized()) return false;
  }
  if (has_localscale()) {
    if (!this->localscale().IsInitialized()) return false;
  }
  return true;
}

void BBGameObject::Swap(BBGameObject* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(name_, other->name_);
    std::swap(classname_, other->classname_);
    std::swap(iconname_, other->iconname_);
    std::swap(filepath_, other->filepath_);
    std::swap(position_, other->position_);
    std::swap(localposition_, other->localposition_);
    std::swap(rotation_, other->rotation_);
    std::swap(localrotation_, other->localrotation_);
    std::swap(quaternion_, other->quaternion_);
    std::swap(localquaternion_, other->localquaternion_);
    std::swap(scale_, other->scale_);
    std::swap(localscale_, other->localscale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BBGameObject::GetTypeName() const {
  return "BBSerializer.BBGameObject";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace BBSerializer

// @@protoc_insertion_point(global_scope)
