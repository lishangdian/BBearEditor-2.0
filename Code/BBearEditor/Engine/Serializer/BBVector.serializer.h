// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BBVector.proto

#ifndef PROTOBUF_BBVector_2eproto__INCLUDED
#define PROTOBUF_BBVector_2eproto__INCLUDED

#include <string>

#include "common.h"

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include "generated_message_util.h"
#include "repeated_field.h"
#include "extension_set.h"
// @@protoc_insertion_point(includes)

namespace Serializer {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BBVector_2eproto();
void protobuf_AssignDesc_BBVector_2eproto();
void protobuf_ShutdownFile_BBVector_2eproto();

class BBVector2f;
class BBVector2i;
class BBVector3f;
class BBVector3i;
class BBVector4f;
class BBVector4i;
class BBMatrix4f;
class BBMatrix4fB;

// ===================================================================

class BBVector2f : public ::google::protobuf::MessageLite {
 public:
  BBVector2f();
  virtual ~BBVector2f();
  
  BBVector2f(const BBVector2f& from);
  
  inline BBVector2f& operator=(const BBVector2f& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BBVector2f& default_instance();
  
  void Swap(BBVector2f* other);
  
  // implements Message ----------------------------------------------
  
  BBVector2f* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BBVector2f& from);
  void MergeFrom(const BBVector2f& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // @@protoc_insertion_point(class_scope:Serializer.BBVector2f)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  
  float x_;
  float y_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_BBVector_2eproto();
  friend void protobuf_AssignDesc_BBVector_2eproto();
  friend void protobuf_ShutdownFile_BBVector_2eproto();
  
  void InitAsDefaultInstance();
  static BBVector2f* default_instance_;
};
// -------------------------------------------------------------------

class BBVector2i : public ::google::protobuf::MessageLite {
 public:
  BBVector2i();
  virtual ~BBVector2i();
  
  BBVector2i(const BBVector2i& from);
  
  inline BBVector2i& operator=(const BBVector2i& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BBVector2i& default_instance();
  
  void Swap(BBVector2i* other);
  
  // implements Message ----------------------------------------------
  
  BBVector2i* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BBVector2i& from);
  void MergeFrom(const BBVector2i& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);
  
  // required int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Serializer.BBVector2i)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_BBVector_2eproto();
  friend void protobuf_AssignDesc_BBVector_2eproto();
  friend void protobuf_ShutdownFile_BBVector_2eproto();
  
  void InitAsDefaultInstance();
  static BBVector2i* default_instance_;
};
// -------------------------------------------------------------------

class BBVector3f : public ::google::protobuf::MessageLite {
 public:
  BBVector3f();
  virtual ~BBVector3f();
  
  BBVector3f(const BBVector3f& from);
  
  inline BBVector3f& operator=(const BBVector3f& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BBVector3f& default_instance();
  
  void Swap(BBVector3f* other);
  
  // implements Message ----------------------------------------------
  
  BBVector3f* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BBVector3f& from);
  void MergeFrom(const BBVector3f& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // required float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);
  
  // @@protoc_insertion_point(class_scope:Serializer.BBVector3f)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  
  float x_;
  float y_;
  float z_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_BBVector_2eproto();
  friend void protobuf_AssignDesc_BBVector_2eproto();
  friend void protobuf_ShutdownFile_BBVector_2eproto();
  
  void InitAsDefaultInstance();
  static BBVector3f* default_instance_;
};
// -------------------------------------------------------------------

class BBVector3i : public ::google::protobuf::MessageLite {
 public:
  BBVector3i();
  virtual ~BBVector3i();
  
  BBVector3i(const BBVector3i& from);
  
  inline BBVector3i& operator=(const BBVector3i& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BBVector3i& default_instance();
  
  void Swap(BBVector3i* other);
  
  // implements Message ----------------------------------------------
  
  BBVector3i* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BBVector3i& from);
  void MergeFrom(const BBVector3i& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);
  
  // required int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);
  
  // required int32 z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline ::google::protobuf::int32 z() const;
  inline void set_z(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Serializer.BBVector3i)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 z_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_BBVector_2eproto();
  friend void protobuf_AssignDesc_BBVector_2eproto();
  friend void protobuf_ShutdownFile_BBVector_2eproto();
  
  void InitAsDefaultInstance();
  static BBVector3i* default_instance_;
};
// -------------------------------------------------------------------

class BBVector4f : public ::google::protobuf::MessageLite {
 public:
  BBVector4f();
  virtual ~BBVector4f();
  
  BBVector4f(const BBVector4f& from);
  
  inline BBVector4f& operator=(const BBVector4f& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BBVector4f& default_instance();
  
  void Swap(BBVector4f* other);
  
  // implements Message ----------------------------------------------
  
  BBVector4f* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BBVector4f& from);
  void MergeFrom(const BBVector4f& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // required float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);
  
  // required float w = 4;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 4;
  inline float w() const;
  inline void set_w(float value);
  
  // @@protoc_insertion_point(class_scope:Serializer.BBVector4f)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_w();
  inline void clear_has_w();
  
  float x_;
  float y_;
  float z_;
  float w_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_BBVector_2eproto();
  friend void protobuf_AssignDesc_BBVector_2eproto();
  friend void protobuf_ShutdownFile_BBVector_2eproto();
  
  void InitAsDefaultInstance();
  static BBVector4f* default_instance_;
};
// -------------------------------------------------------------------

class BBVector4i : public ::google::protobuf::MessageLite {
 public:
  BBVector4i();
  virtual ~BBVector4i();
  
  BBVector4i(const BBVector4i& from);
  
  inline BBVector4i& operator=(const BBVector4i& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BBVector4i& default_instance();
  
  void Swap(BBVector4i* other);
  
  // implements Message ----------------------------------------------
  
  BBVector4i* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BBVector4i& from);
  void MergeFrom(const BBVector4i& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);
  
  // required int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);
  
  // required int32 z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline ::google::protobuf::int32 z() const;
  inline void set_z(::google::protobuf::int32 value);
  
  // required int32 w = 4;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 4;
  inline ::google::protobuf::int32 w() const;
  inline void set_w(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Serializer.BBVector4i)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_w();
  inline void clear_has_w();
  
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 z_;
  ::google::protobuf::int32 w_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_BBVector_2eproto();
  friend void protobuf_AssignDesc_BBVector_2eproto();
  friend void protobuf_ShutdownFile_BBVector_2eproto();
  
  void InitAsDefaultInstance();
  static BBVector4i* default_instance_;
};
// -------------------------------------------------------------------

class BBMatrix4f : public ::google::protobuf::MessageLite {
 public:
  BBMatrix4f();
  virtual ~BBMatrix4f();
  
  BBMatrix4f(const BBMatrix4f& from);
  
  inline BBMatrix4f& operator=(const BBMatrix4f& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BBMatrix4f& default_instance();
  
  void Swap(BBMatrix4f* other);
  
  // implements Message ----------------------------------------------
  
  BBMatrix4f* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BBMatrix4f& from);
  void MergeFrom(const BBMatrix4f& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated float data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline float data(int index) const;
  inline void set_data(int index, float value);
  inline void add_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_data();
  
  // @@protoc_insertion_point(class_scope:Serializer.BBMatrix4f)
 private:
  
  ::google::protobuf::RepeatedField< float > data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_BBVector_2eproto();
  friend void protobuf_AssignDesc_BBVector_2eproto();
  friend void protobuf_ShutdownFile_BBVector_2eproto();
  
  void InitAsDefaultInstance();
  static BBMatrix4f* default_instance_;
};
// -------------------------------------------------------------------

class BBMatrix4fB : public ::google::protobuf::MessageLite {
 public:
  BBMatrix4fB();
  virtual ~BBMatrix4fB();
  
  BBMatrix4fB(const BBMatrix4fB& from);
  
  inline BBMatrix4fB& operator=(const BBMatrix4fB& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BBMatrix4fB& default_instance();
  
  void Swap(BBMatrix4fB* other);
  
  // implements Message ----------------------------------------------
  
  BBMatrix4fB* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BBMatrix4fB& from);
  void MergeFrom(const BBMatrix4fB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  
  // @@protoc_insertion_point(class_scope:Serializer.BBMatrix4fB)
 private:
  inline void set_has_data();
  inline void clear_has_data();
  
  ::std::string* data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_BBVector_2eproto();
  friend void protobuf_AssignDesc_BBVector_2eproto();
  friend void protobuf_ShutdownFile_BBVector_2eproto();
  
  void InitAsDefaultInstance();
  static BBMatrix4fB* default_instance_;
};
// ===================================================================


// ===================================================================

// BBVector2f

// required float x = 1;
inline bool BBVector2f::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BBVector2f::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BBVector2f::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BBVector2f::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float BBVector2f::x() const {
  return x_;
}
inline void BBVector2f::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool BBVector2f::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BBVector2f::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BBVector2f::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BBVector2f::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float BBVector2f::y() const {
  return y_;
}
inline void BBVector2f::set_y(float value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// BBVector2i

// required int32 x = 1;
inline bool BBVector2i::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BBVector2i::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BBVector2i::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BBVector2i::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 BBVector2i::x() const {
  return x_;
}
inline void BBVector2i::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// required int32 y = 2;
inline bool BBVector2i::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BBVector2i::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BBVector2i::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BBVector2i::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 BBVector2i::y() const {
  return y_;
}
inline void BBVector2i::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// BBVector3f

// required float x = 1;
inline bool BBVector3f::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BBVector3f::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BBVector3f::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BBVector3f::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float BBVector3f::x() const {
  return x_;
}
inline void BBVector3f::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool BBVector3f::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BBVector3f::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BBVector3f::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BBVector3f::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float BBVector3f::y() const {
  return y_;
}
inline void BBVector3f::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required float z = 3;
inline bool BBVector3f::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BBVector3f::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BBVector3f::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BBVector3f::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float BBVector3f::z() const {
  return z_;
}
inline void BBVector3f::set_z(float value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// BBVector3i

// required int32 x = 1;
inline bool BBVector3i::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BBVector3i::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BBVector3i::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BBVector3i::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 BBVector3i::x() const {
  return x_;
}
inline void BBVector3i::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// required int32 y = 2;
inline bool BBVector3i::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BBVector3i::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BBVector3i::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BBVector3i::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 BBVector3i::y() const {
  return y_;
}
inline void BBVector3i::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// required int32 z = 3;
inline bool BBVector3i::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BBVector3i::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BBVector3i::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BBVector3i::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline ::google::protobuf::int32 BBVector3i::z() const {
  return z_;
}
inline void BBVector3i::set_z(::google::protobuf::int32 value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// BBVector4f

// required float x = 1;
inline bool BBVector4f::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BBVector4f::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BBVector4f::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BBVector4f::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float BBVector4f::x() const {
  return x_;
}
inline void BBVector4f::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool BBVector4f::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BBVector4f::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BBVector4f::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BBVector4f::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float BBVector4f::y() const {
  return y_;
}
inline void BBVector4f::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required float z = 3;
inline bool BBVector4f::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BBVector4f::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BBVector4f::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BBVector4f::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float BBVector4f::z() const {
  return z_;
}
inline void BBVector4f::set_z(float value) {
  set_has_z();
  z_ = value;
}

// required float w = 4;
inline bool BBVector4f::has_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BBVector4f::set_has_w() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BBVector4f::clear_has_w() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BBVector4f::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline float BBVector4f::w() const {
  return w_;
}
inline void BBVector4f::set_w(float value) {
  set_has_w();
  w_ = value;
}

// -------------------------------------------------------------------

// BBVector4i

// required int32 x = 1;
inline bool BBVector4i::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BBVector4i::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BBVector4i::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BBVector4i::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 BBVector4i::x() const {
  return x_;
}
inline void BBVector4i::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// required int32 y = 2;
inline bool BBVector4i::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BBVector4i::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BBVector4i::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BBVector4i::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 BBVector4i::y() const {
  return y_;
}
inline void BBVector4i::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// required int32 z = 3;
inline bool BBVector4i::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BBVector4i::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BBVector4i::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BBVector4i::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline ::google::protobuf::int32 BBVector4i::z() const {
  return z_;
}
inline void BBVector4i::set_z(::google::protobuf::int32 value) {
  set_has_z();
  z_ = value;
}

// required int32 w = 4;
inline bool BBVector4i::has_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BBVector4i::set_has_w() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BBVector4i::clear_has_w() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BBVector4i::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline ::google::protobuf::int32 BBVector4i::w() const {
  return w_;
}
inline void BBVector4i::set_w(::google::protobuf::int32 value) {
  set_has_w();
  w_ = value;
}

// -------------------------------------------------------------------

// BBMatrix4f

// repeated float data = 1;
inline int BBMatrix4f::data_size() const {
  return data_.size();
}
inline void BBMatrix4f::clear_data() {
  data_.Clear();
}
inline float BBMatrix4f::data(int index) const {
  return data_.Get(index);
}
inline void BBMatrix4f::set_data(int index, float value) {
  data_.Set(index, value);
}
inline void BBMatrix4f::add_data(float value) {
  data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
BBMatrix4f::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
BBMatrix4f::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// BBMatrix4fB

// optional bytes data = 1;
inline bool BBMatrix4fB::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BBMatrix4fB::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BBMatrix4fB::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BBMatrix4fB::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& BBMatrix4fB::data() const {
  return *data_;
}
inline void BBMatrix4fB::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void BBMatrix4fB::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void BBMatrix4fB::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BBMatrix4fB::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* BBMatrix4fB::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serializer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BBVector_2eproto__INCLUDED
